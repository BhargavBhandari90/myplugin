{"version":3,"sources":["@wordpress/autop/src/index.js"],"names":["htmlSplitRegex","comments","cdata","escaped","regex","RegExp","htmlSplit","input","parts","workingInput","match","index","push","slice","length","replaceInHtmlTags","haystack","replacePairs","textArr","changed","needles","Object","keys","i","j","needle","indexOf","replace","join","autop","text","br","preTags","trim","textParts","split","lastText","pop","textPart","start","name","substr","allBlocks","texts","filter","Boolean","forEach","textPiece","a","b","preTag","original","removep","html","blocklist","blocklist1","blocklist2","preserve","preserveLinebreaks","preserveBr","_","space","shift"],"mappings":"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","sourcesContent":["/**\n * The regular expression for an HTML element.\n *\n * @type {RegExp}\n */\nconst htmlSplitRegex = ( () => {\n\t/* eslint-disable no-multi-spaces */\n\tconst comments =\n\t\t'!' + // Start of comment, after the <.\n\t\t'(?:' + // Unroll the loop: Consume everything until --> is found.\n\t\t'-(?!->)' + // Dash not followed by end of comment.\n\t\t'[^\\\\-]*' + // Consume non-dashes.\n\t\t')*' + // Loop possessively.\n\t\t'(?:-->)?'; // End of comment. If not found, match all input.\n\n\tconst cdata =\n\t\t'!\\\\[CDATA\\\\[' + // Start of comment, after the <.\n\t\t'[^\\\\]]*' + // Consume non-].\n\t\t'(?:' + // Unroll the loop: Consume everything until ]]> is found.\n\t\t'](?!]>)' + // One ] not followed by end of comment.\n\t\t'[^\\\\]]*' + // Consume non-].\n\t\t')*?' + // Loop possessively.\n\t\t'(?:]]>)?'; // End of comment. If not found, match all input.\n\n\tconst escaped =\n\t\t'(?=' + // Is the element escaped?\n\t\t'!--' +\n\t\t'|' +\n\t\t'!\\\\[CDATA\\\\[' +\n\t\t')' +\n\t\t'((?=!-)' + // If yes, which type?\n\t\tcomments +\n\t\t'|' +\n\t\tcdata +\n\t\t')';\n\n\tconst regex =\n\t\t'(' + // Capture the entire match.\n\t\t'<' + // Find start of element.\n\t\t'(' + // Conditional expression follows.\n\t\tescaped + // Find end of escaped element.\n\t\t'|' + // ... else ...\n\t\t'[^>]*>?' + // Find end of normal element.\n\t\t')' +\n\t\t')';\n\n\treturn new RegExp( regex );\n\t/* eslint-enable no-multi-spaces */\n} )();\n\n/**\n * Separate HTML elements and comments from the text.\n *\n * @param {string} input The text which has to be formatted.\n *\n * @return {string[]} The formatted text.\n */\nfunction htmlSplit( input ) {\n\tconst parts = [];\n\tlet workingInput = input;\n\n\tlet match;\n\twhile ( ( match = workingInput.match( htmlSplitRegex ) ) ) {\n\t\t// The `match` result, when invoked on a RegExp with the `g` flag (`/foo/g`) will not include `index`.\n\t\t// If the `g` flag is omitted, `index` is included.\n\t\t// `htmlSplitRegex` does not have the `g` flag so we can assert it will have an index number.\n\t\t// Assert `match.index` is a number.\n\t\tconst index = /** @type {number} */ ( match.index );\n\n\t\tparts.push( workingInput.slice( 0, index ) );\n\t\tparts.push( match[ 0 ] );\n\t\tworkingInput = workingInput.slice( index + match[ 0 ].length );\n\t}\n\n\tif ( workingInput.length ) {\n\t\tparts.push( workingInput );\n\t}\n\n\treturn parts;\n}\n\n/**\n * Replace characters or phrases within HTML elements only.\n *\n * @param {string}                haystack     The text which has to be formatted.\n * @param {Record<string,string>} replacePairs In the form {from: 'to', …}.\n *\n * @return {string} The formatted text.\n */\nfunction replaceInHtmlTags( haystack, replacePairs ) {\n\t// Find all elements.\n\tconst textArr = htmlSplit( haystack );\n\tlet changed = false;\n\n\t// Extract all needles.\n\tconst needles = Object.keys( replacePairs );\n\n\t// Loop through delimiters (elements) only.\n\tfor ( let i = 1; i < textArr.length; i += 2 ) {\n\t\tfor ( let j = 0; j < needles.length; j++ ) {\n\t\t\tconst needle = needles[ j ];\n\t\t\tif ( -1 !== textArr[ i ].indexOf( needle ) ) {\n\t\t\t\ttextArr[ i ] = textArr[ i ].replace(\n\t\t\t\t\tnew RegExp( needle, 'g' ),\n\t\t\t\t\treplacePairs[ needle ]\n\t\t\t\t);\n\t\t\t\tchanged = true;\n\t\t\t\t// After one strtr() break out of the foreach loop and look at next element.\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\tif ( changed ) {\n\t\thaystack = textArr.join( '' );\n\t}\n\n\treturn haystack;\n}\n\n/**\n * Replaces double line-breaks with paragraph elements.\n *\n * A group of regex replaces used to identify text formatted with newlines and\n * replace double line-breaks with HTML paragraph tags. The remaining line-\n * breaks after conversion become `<br />` tags, unless br is set to 'false'.\n *\n * @param {string}  text The text which has to be formatted.\n * @param {boolean} br   Optional. If set, will convert all remaining line-\n *                       breaks after paragraphing. Default true.\n *\n * @example\n *```js\n * import { autop } from '@wordpress/autop';\n * autop( 'my text' ); // \"<p>my text</p>\"\n * ```\n *\n * @return {string} Text which has been converted into paragraph tags.\n */\nexport function autop( text, br = true ) {\n\tconst preTags = [];\n\n\tif ( text.trim() === '' ) {\n\t\treturn '';\n\t}\n\n\t// Just to make things a little easier, pad the end.\n\ttext = text + '\\n';\n\n\t/*\n\t * Pre tags shouldn't be touched by autop.\n\t * Replace pre tags with placeholders and bring them back after autop.\n\t */\n\tif ( text.indexOf( '<pre' ) !== -1 ) {\n\t\tconst textParts = text.split( '</pre>' );\n\t\tconst lastText = textParts.pop();\n\t\ttext = '';\n\n\t\tfor ( let i = 0; i < textParts.length; i++ ) {\n\t\t\tconst textPart = textParts[ i ];\n\t\t\tconst start = textPart.indexOf( '<pre' );\n\n\t\t\t// Malformed html?\n\t\t\tif ( start === -1 ) {\n\t\t\t\ttext += textPart;\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst name = '<pre wp-pre-tag-' + i + '></pre>';\n\t\t\tpreTags.push( [ name, textPart.substr( start ) + '</pre>' ] );\n\n\t\t\ttext += textPart.substr( 0, start ) + name;\n\t\t}\n\n\t\ttext += lastText;\n\t}\n\t// Change multiple <br>s into two line breaks, which will turn into paragraphs.\n\ttext = text.replace( /<br\\s*\\/?>\\s*<br\\s*\\/?>/g, '\\n\\n' );\n\n\tconst allBlocks =\n\t\t'(?:table|thead|tfoot|caption|col|colgroup|tbody|tr|td|th|div|dl|dd|dt|ul|ol|li|pre|form|map|area|blockquote|address|math|style|p|h[1-6]|hr|fieldset|legend|section|article|aside|hgroup|header|footer|nav|figure|figcaption|details|menu|summary)';\n\n\t// Add a double line break above block-level opening tags.\n\ttext = text.replace(\n\t\tnew RegExp( '(<' + allBlocks + '[\\\\s/>])', 'g' ),\n\t\t'\\n\\n$1'\n\t);\n\n\t// Add a double line break below block-level closing tags.\n\ttext = text.replace(\n\t\tnew RegExp( '(</' + allBlocks + '>)', 'g' ),\n\t\t'$1\\n\\n'\n\t);\n\n\t// Standardize newline characters to \"\\n\".\n\ttext = text.replace( /\\r\\n|\\r/g, '\\n' );\n\n\t// Find newlines in all elements and add placeholders.\n\ttext = replaceInHtmlTags( text, { '\\n': ' <!-- wpnl --> ' } );\n\n\t// Collapse line breaks before and after <option> elements so they don't get autop'd.\n\tif ( text.indexOf( '<option' ) !== -1 ) {\n\t\ttext = text.replace( /\\s*<option/g, '<option' );\n\t\ttext = text.replace( /<\\/option>\\s*/g, '</option>' );\n\t}\n\n\t/*\n\t * Collapse line breaks inside <object> elements, before <param> and <embed> elements\n\t * so they don't get autop'd.\n\t */\n\tif ( text.indexOf( '</object>' ) !== -1 ) {\n\t\ttext = text.replace( /(<object[^>]*>)\\s*/g, '$1' );\n\t\ttext = text.replace( /\\s*<\\/object>/g, '</object>' );\n\t\ttext = text.replace( /\\s*(<\\/?(?:param|embed)[^>]*>)\\s*/g, '$1' );\n\t}\n\n\t/*\n\t * Collapse line breaks inside <audio> and <video> elements,\n\t * before and after <source> and <track> elements.\n\t */\n\tif ( text.indexOf( '<source' ) !== -1 || text.indexOf( '<track' ) !== -1 ) {\n\t\ttext = text.replace( /([<\\[](?:audio|video)[^>\\]]*[>\\]])\\s*/g, '$1' );\n\t\ttext = text.replace( /\\s*([<\\[]\\/(?:audio|video)[>\\]])/g, '$1' );\n\t\ttext = text.replace( /\\s*(<(?:source|track)[^>]*>)\\s*/g, '$1' );\n\t}\n\n\t// Collapse line breaks before and after <figcaption> elements.\n\tif ( text.indexOf( '<figcaption' ) !== -1 ) {\n\t\ttext = text.replace( /\\s*(<figcaption[^>]*>)/, '$1' );\n\t\ttext = text.replace( /<\\/figcaption>\\s*/, '</figcaption>' );\n\t}\n\n\t// Remove more than two contiguous line breaks.\n\ttext = text.replace( /\\n\\n+/g, '\\n\\n' );\n\n\t// Split up the contents into an array of strings, separated by double line breaks.\n\tconst texts = text.split( /\\n\\s*\\n/ ).filter( Boolean );\n\n\t// Reset text prior to rebuilding.\n\ttext = '';\n\n\t// Rebuild the content as a string, wrapping every bit with a <p>.\n\ttexts.forEach( ( textPiece ) => {\n\t\ttext += '<p>' + textPiece.replace( /^\\n*|\\n*$/g, '' ) + '</p>\\n';\n\t} );\n\n\t// Under certain strange conditions it could create a P of entirely whitespace.\n\ttext = text.replace( /<p>\\s*<\\/p>/g, '' );\n\n\t// Add a closing <p> inside <div>, <address>, or <form> tag if missing.\n\ttext = text.replace(\n\t\t/<p>([^<]+)<\\/(div|address|form)>/g,\n\t\t'<p>$1</p></$2>'\n\t);\n\n\t// If an opening or closing block element tag is wrapped in a <p>, unwrap it.\n\ttext = text.replace(\n\t\tnew RegExp( '<p>\\\\s*(</?' + allBlocks + '[^>]*>)\\\\s*</p>', 'g' ),\n\t\t'$1'\n\t);\n\n\t// In some cases <li> may get wrapped in <p>, fix them.\n\ttext = text.replace( /<p>(<li.+?)<\\/p>/g, '$1' );\n\n\t// If a <blockquote> is wrapped with a <p>, move it inside the <blockquote>.\n\ttext = text.replace( /<p><blockquote([^>]*)>/gi, '<blockquote$1><p>' );\n\ttext = text.replace( /<\\/blockquote><\\/p>/g, '</p></blockquote>' );\n\n\t// If an opening or closing block element tag is preceded by an opening <p> tag, remove it.\n\ttext = text.replace(\n\t\tnew RegExp( '<p>\\\\s*(</?' + allBlocks + '[^>]*>)', 'g' ),\n\t\t'$1'\n\t);\n\n\t// If an opening or closing block element tag is followed by a closing <p> tag, remove it.\n\ttext = text.replace(\n\t\tnew RegExp( '(</?' + allBlocks + '[^>]*>)\\\\s*</p>', 'g' ),\n\t\t'$1'\n\t);\n\n\t// Optionally insert line breaks.\n\tif ( br ) {\n\t\t// Replace newlines that shouldn't be touched with a placeholder.\n\t\ttext = text.replace( /<(script|style).*?<\\/\\\\1>/g, ( match ) =>\n\t\t\tmatch[ 0 ].replace( /\\n/g, '<WPPreserveNewline />' )\n\t\t);\n\n\t\t// Normalize <br>\n\t\ttext = text.replace( /<br>|<br\\/>/g, '<br />' );\n\n\t\t// Replace any new line characters that aren't preceded by a <br /> with a <br />.\n\t\ttext = text.replace( /(<br \\/>)?\\s*\\n/g, ( a, b ) =>\n\t\t\tb ? a : '<br />\\n'\n\t\t);\n\n\t\t// Replace newline placeholders with newlines.\n\t\ttext = text.replace( /<WPPreserveNewline \\/>/g, '\\n' );\n\t}\n\n\t// If a <br /> tag is after an opening or closing block tag, remove it.\n\ttext = text.replace(\n\t\tnew RegExp( '(</?' + allBlocks + '[^>]*>)\\\\s*<br />', 'g' ),\n\t\t'$1'\n\t);\n\n\t// If a <br /> tag is before a subset of opening or closing block tags, remove it.\n\ttext = text.replace(\n\t\t/<br \\/>(\\s*<\\/?(?:p|li|div|dl|dd|dt|th|pre|td|ul|ol)[^>]*>)/g,\n\t\t'$1'\n\t);\n\ttext = text.replace( /\\n<\\/p>$/g, '</p>' );\n\n\t// Replace placeholder <pre> tags with their original content.\n\tpreTags.forEach( ( preTag ) => {\n\t\tconst [ name, original ] = preTag;\n\t\ttext = text.replace( name, original );\n\t} );\n\n\t// Restore newlines in all elements.\n\tif ( -1 !== text.indexOf( '<!-- wpnl -->' ) ) {\n\t\ttext = text.replace( /\\s?<!-- wpnl -->\\s?/g, '\\n' );\n\t}\n\n\treturn text;\n}\n\n/**\n * Replaces `<p>` tags with two line breaks. \"Opposite\" of autop().\n *\n * Replaces `<p>` tags with two line breaks except where the `<p>` has attributes.\n * Unifies whitespace. Indents `<li>`, `<dt>` and `<dd>` for better readability.\n *\n * @param {string} html The content from the editor.\n *\n * @example\n * ```js\n * import { removep } from '@wordpress/autop';\n * removep( '<p>my text</p>' ); // \"my text\"\n * ```\n *\n * @return {string} The content with stripped paragraph tags.\n */\nexport function removep( html ) {\n\tconst blocklist =\n\t\t'blockquote|ul|ol|li|dl|dt|dd|table|thead|tbody|tfoot|tr|th|td|h[1-6]|fieldset|figure';\n\tconst blocklist1 = blocklist + '|div|p';\n\tconst blocklist2 = blocklist + '|pre';\n\t/** @type {string[]} */\n\tconst preserve = [];\n\tlet preserveLinebreaks = false;\n\tlet preserveBr = false;\n\n\tif ( ! html ) {\n\t\treturn '';\n\t}\n\n\t// Protect script and style tags.\n\tif ( html.indexOf( '<script' ) !== -1 || html.indexOf( '<style' ) !== -1 ) {\n\t\thtml = html.replace(\n\t\t\t/<(script|style)[^>]*>[\\s\\S]*?<\\/\\1>/g,\n\t\t\t( match ) => {\n\t\t\t\tpreserve.push( match );\n\t\t\t\treturn '<wp-preserve>';\n\t\t\t}\n\t\t);\n\t}\n\n\t// Protect pre tags.\n\tif ( html.indexOf( '<pre' ) !== -1 ) {\n\t\tpreserveLinebreaks = true;\n\t\thtml = html.replace( /<pre[^>]*>[\\s\\S]+?<\\/pre>/g, ( a ) => {\n\t\t\ta = a.replace( /<br ?\\/?>(\\r\\n|\\n)?/g, '<wp-line-break>' );\n\t\t\ta = a.replace( /<\\/?p( [^>]*)?>(\\r\\n|\\n)?/g, '<wp-line-break>' );\n\t\t\treturn a.replace( /\\r?\\n/g, '<wp-line-break>' );\n\t\t} );\n\t}\n\n\t// Remove line breaks but keep <br> tags inside image captions.\n\tif ( html.indexOf( '[caption' ) !== -1 ) {\n\t\tpreserveBr = true;\n\t\thtml = html.replace( /\\[caption[\\s\\S]+?\\[\\/caption\\]/g, ( a ) => {\n\t\t\treturn a\n\t\t\t\t.replace( /<br([^>]*)>/g, '<wp-temp-br$1>' )\n\t\t\t\t.replace( /[\\r\\n\\t]+/, '' );\n\t\t} );\n\t}\n\n\t// Normalize white space characters before and after block tags.\n\thtml = html.replace(\n\t\tnew RegExp( '\\\\s*</(' + blocklist1 + ')>\\\\s*', 'g' ),\n\t\t'</$1>\\n'\n\t);\n\thtml = html.replace(\n\t\tnew RegExp( '\\\\s*<((?:' + blocklist1 + ')(?: [^>]*)?)>', 'g' ),\n\t\t'\\n<$1>'\n\t);\n\n\t// Mark </p> if it has any attributes.\n\thtml = html.replace( /(<p [^>]+>[\\s\\S]*?)<\\/p>/g, '$1</p#>' );\n\n\t// Preserve the first <p> inside a <div>.\n\thtml = html.replace( /<div( [^>]*)?>\\s*<p>/gi, '<div$1>\\n\\n' );\n\n\t// Remove paragraph tags.\n\thtml = html.replace( /\\s*<p>/gi, '' );\n\thtml = html.replace( /\\s*<\\/p>\\s*/gi, '\\n\\n' );\n\n\t// Normalize white space chars and remove multiple line breaks.\n\thtml = html.replace( /\\n[\\s\\u00a0]+\\n/g, '\\n\\n' );\n\n\t// Replace <br> tags with line breaks.\n\thtml = html.replace( /(\\s*)<br ?\\/?>\\s*/gi, ( _, space ) => {\n\t\tif ( space && space.indexOf( '\\n' ) !== -1 ) {\n\t\t\treturn '\\n\\n';\n\t\t}\n\n\t\treturn '\\n';\n\t} );\n\n\t// Fix line breaks around <div>.\n\thtml = html.replace( /\\s*<div/g, '\\n<div' );\n\thtml = html.replace( /<\\/div>\\s*/g, '</div>\\n' );\n\n\t// Fix line breaks around caption shortcodes.\n\thtml = html.replace(\n\t\t/\\s*\\[caption([^\\[]+)\\[\\/caption\\]\\s*/gi,\n\t\t'\\n\\n[caption$1[/caption]\\n\\n'\n\t);\n\thtml = html.replace( /caption\\]\\n\\n+\\[caption/g, 'caption]\\n\\n[caption' );\n\n\t// Pad block elements tags with a line break.\n\thtml = html.replace(\n\t\tnew RegExp( '\\\\s*<((?:' + blocklist2 + ')(?: [^>]*)?)\\\\s*>', 'g' ),\n\t\t'\\n<$1>'\n\t);\n\thtml = html.replace(\n\t\tnew RegExp( '\\\\s*</(' + blocklist2 + ')>\\\\s*', 'g' ),\n\t\t'</$1>\\n'\n\t);\n\n\t// Indent <li>, <dt> and <dd> tags.\n\thtml = html.replace( /<((li|dt|dd)[^>]*)>/g, ' \\t<$1>' );\n\n\t// Fix line breaks around <select> and <option>.\n\tif ( html.indexOf( '<option' ) !== -1 ) {\n\t\thtml = html.replace( /\\s*<option/g, '\\n<option' );\n\t\thtml = html.replace( /\\s*<\\/select>/g, '\\n</select>' );\n\t}\n\n\t// Pad <hr> with two line breaks.\n\tif ( html.indexOf( '<hr' ) !== -1 ) {\n\t\thtml = html.replace( /\\s*<hr( [^>]*)?>\\s*/g, '\\n\\n<hr$1>\\n\\n' );\n\t}\n\n\t// Remove line breaks in <object> tags.\n\tif ( html.indexOf( '<object' ) !== -1 ) {\n\t\thtml = html.replace( /<object[\\s\\S]+?<\\/object>/g, ( a ) => {\n\t\t\treturn a.replace( /[\\r\\n]+/g, '' );\n\t\t} );\n\t}\n\n\t// Unmark special paragraph closing tags.\n\thtml = html.replace( /<\\/p#>/g, '</p>\\n' );\n\n\t// Pad remaining <p> tags whit a line break.\n\thtml = html.replace( /\\s*(<p [^>]+>[\\s\\S]*?<\\/p>)/g, '\\n$1' );\n\n\t// Trim.\n\thtml = html.replace( /^\\s+/, '' );\n\thtml = html.replace( /[\\s\\u00a0]+$/, '' );\n\n\tif ( preserveLinebreaks ) {\n\t\thtml = html.replace( /<wp-line-break>/g, '\\n' );\n\t}\n\n\tif ( preserveBr ) {\n\t\thtml = html.replace( /<wp-temp-br([^>]*)>/g, '<br$1>' );\n\t}\n\n\t// Restore preserved tags.\n\tif ( preserve.length ) {\n\t\thtml = html.replace( /<wp-preserve>/g, () => {\n\t\t\treturn /** @type {string} */ ( preserve.shift() );\n\t\t} );\n\t}\n\n\treturn html;\n}\n"]}