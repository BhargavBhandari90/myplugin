{"version":3,"sources":["@wordpress/redux-routine/src/runtime.ts"],"names":["createRuntime","controls","dispatch","rungenControls","control","actionType","value","next","iterate","yieldNext","yieldError","routine","then","unhandledActionControl","push","rungenRuntime","action","Promise","resolve","reject","result"],"mappings":";;;;;;;;;AAGA;;AACA;;AACA;;AAMA;;AAXA;AACA;AACA;;AAMA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACe,SAASA,aAAT,GAMb;AAAA,MALDC,QAKC,uEAFG,EAEH;AAAA,MADDC,QACC;AACD,QAAMC,cAAc,GAAG,iBACtBF,QADsB,EAEtB,CAAEG,OAAF,EAAWC,UAAX,KACC,CAAEC,KAAF,EAASC,IAAT,EAAeC,OAAf,EAAwBC,SAAxB,EAAmCC,UAAnC,KAAmD;AAClD,QAAK,CAAE,8BAAgBJ,KAAhB,EAAuBD,UAAvB,CAAP,EAA6C;AAC5C,aAAO,KAAP;AACA;;AACD,UAAMM,OAAO,GAAGP,OAAO,CAAEE,KAAF,CAAvB;;AACA,QAAK,wBAAWK,OAAX,CAAL,EAA4B;AAC3B;AACAA,MAAAA,OAAO,CAACC,IAAR,CAAcH,SAAd,EAAyBC,UAAzB;AACA,KAHD,MAGO;AACND,MAAAA,SAAS,CAAEE,OAAF,CAAT;AACA;;AACD,WAAO,IAAP;AACA,GAfoB,CAAvB;;AAkBA,QAAME,sBAAsB,GAAG,CAC9BP,KAD8B,EAE9BC,IAF8B,KAG1B;AACJ,QAAK,CAAE,wBAAUD,KAAV,CAAP,EAA2B;AAC1B,aAAO,KAAP;AACA;;AACDJ,IAAAA,QAAQ,CAAEI,KAAF,CAAR;AACAC,IAAAA,IAAI;AACJ,WAAO,IAAP;AACA,GAVD;;AAWAJ,EAAAA,cAAc,CAACW,IAAf,CAAqBD,sBAArB;AAEA,QAAME,aAAa,GAAG,oBAAQZ,cAAR,CAAtB;AAEA,SAASa,MAAF,IACN,IAAIC,OAAJ,CAAa,CAAEC,OAAF,EAAWC,MAAX,KACZJ,aAAa,CACZC,MADY,EAEVI,MAAF,IAAc;AACb,QAAK,wBAAUA,MAAV,CAAL,EAA0B;AACzBlB,MAAAA,QAAQ,CAAEkB,MAAF,CAAR;AACA;;AACDF,IAAAA,OAAO,CAAEE,MAAF,CAAP;AACA,GAPW,EAQZD,MARY,CADd,CADD;AAaA","sourcesContent":["/**\n * External dependencies\n */\nimport { create, Control } from 'rungen';\nimport { map } from 'lodash';\nimport isPromise from 'is-promise';\nimport type { Dispatch, AnyAction } from 'redux';\n\n/**\n * Internal dependencies\n */\nimport { isActionOfType, isAction } from './is-action';\n\n/**\n * Create a co-routine runtime.\n *\n * @param  controls Object of control handlers.\n * @param  dispatch Unhandled action dispatch.\n */\nexport default function createRuntime(\n\tcontrols: Record<\n\t\tstring,\n\t\t( value: any ) => Promise< boolean > | boolean\n\t> = {},\n\tdispatch: Dispatch\n) {\n\tconst rungenControls = map(\n\t\tcontrols,\n\t\t( control, actionType ): Control =>\n\t\t\t( value, next, iterate, yieldNext, yieldError ) => {\n\t\t\t\tif ( ! isActionOfType( value, actionType ) ) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tconst routine = control( value );\n\t\t\t\tif ( isPromise( routine ) ) {\n\t\t\t\t\t// Async control routine awaits resolution.\n\t\t\t\t\troutine.then( yieldNext, yieldError );\n\t\t\t\t} else {\n\t\t\t\t\tyieldNext( routine );\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t\t}\n\t);\n\n\tconst unhandledActionControl = (\n\t\tvalue: AnyAction | unknown,\n\t\tnext: () => void\n\t) => {\n\t\tif ( ! isAction( value ) ) {\n\t\t\treturn false;\n\t\t}\n\t\tdispatch( value );\n\t\tnext();\n\t\treturn true;\n\t};\n\trungenControls.push( unhandledActionControl );\n\n\tconst rungenRuntime = create( rungenControls );\n\n\treturn ( action: AnyAction | Generator ) =>\n\t\tnew Promise( ( resolve, reject ) =>\n\t\t\trungenRuntime(\n\t\t\t\taction,\n\t\t\t\t( result ) => {\n\t\t\t\t\tif ( isAction( result ) ) {\n\t\t\t\t\t\tdispatch( result );\n\t\t\t\t\t}\n\t\t\t\t\tresolve( result );\n\t\t\t\t},\n\t\t\t\treject\n\t\t\t)\n\t\t);\n}\n"]}