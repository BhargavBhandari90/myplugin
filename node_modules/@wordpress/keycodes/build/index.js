"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.shortcutAriaLabel = exports.rawShortcut = exports.modifiers = exports.isKeyboardEvent = exports.displayShortcutList = exports.displayShortcut = exports.ZERO = exports.UP = exports.TAB = exports.SPACE = exports.SHIFT = exports.RIGHT = exports.PAGEUP = exports.PAGEDOWN = exports.LEFT = exports.HOME = exports.F10 = exports.ESCAPE = exports.ENTER = exports.END = exports.DOWN = exports.DELETE = exports.CTRL = exports.COMMAND = exports.BACKSPACE = exports.ALT = void 0;

var _lodash = require("lodash");

var _i18n = require("@wordpress/i18n");

var _platform = require("./platform");

/**
 * Note: The order of the modifier keys in many of the [foo]Shortcut()
 * functions in this file are intentional and should not be changed. They're
 * designed to fit with the standard menu keyboard shortcuts shown in the
 * user's platform.
 *
 * For example, on MacOS menu shortcuts will place Shift before Command, but
 * on Windows Control will usually come first. So don't provide your own
 * shortcut combos directly to keyboardShortcut().
 */

/**
 * External dependencies
 */

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */

/** @typedef {typeof ALT | CTRL | COMMAND | SHIFT } WPModifierPart */

/** @typedef {'primary' | 'primaryShift' | 'primaryAlt' | 'secondary' | 'access' | 'ctrl' | 'alt' | 'ctrlShift' | 'shift' | 'shiftAlt' | 'undefined'} WPKeycodeModifier */

/**
 * An object of handler functions for each of the possible modifier
 * combinations. A handler will return a value for a given key.
 *
 * @template T
 *
 * @typedef {Record<WPKeycodeModifier, T>} WPModifierHandler
 */

/**
 * @template T
 *
 * @typedef {(character: string, isApple?: () => boolean) => T} WPKeyHandler
 */

/** @typedef {(event: KeyboardEvent, character: string, isApple?: () => boolean) => boolean} WPEventKeyHandler */

/**
 * Keycode for BACKSPACE key.
 */
const BACKSPACE = 8;
/**
 * Keycode for TAB key.
 */

exports.BACKSPACE = BACKSPACE;
const TAB = 9;
/**
 * Keycode for ENTER key.
 */

exports.TAB = TAB;
const ENTER = 13;
/**
 * Keycode for ESCAPE key.
 */

exports.ENTER = ENTER;
const ESCAPE = 27;
/**
 * Keycode for SPACE key.
 */

exports.ESCAPE = ESCAPE;
const SPACE = 32;
/**
 * Keycode for PAGEUP key.
 */

exports.SPACE = SPACE;
const PAGEUP = 33;
/**
 * Keycode for PAGEDOWN key.
 */

exports.PAGEUP = PAGEUP;
const PAGEDOWN = 34;
/**
 * Keycode for END key.
 */

exports.PAGEDOWN = PAGEDOWN;
const END = 35;
/**
 * Keycode for HOME key.
 */

exports.END = END;
const HOME = 36;
/**
 * Keycode for LEFT key.
 */

exports.HOME = HOME;
const LEFT = 37;
/**
 * Keycode for UP key.
 */

exports.LEFT = LEFT;
const UP = 38;
/**
 * Keycode for RIGHT key.
 */

exports.UP = UP;
const RIGHT = 39;
/**
 * Keycode for DOWN key.
 */

exports.RIGHT = RIGHT;
const DOWN = 40;
/**
 * Keycode for DELETE key.
 */

exports.DOWN = DOWN;
const DELETE = 46;
/**
 * Keycode for F10 key.
 */

exports.DELETE = DELETE;
const F10 = 121;
/**
 * Keycode for ALT key.
 */

exports.F10 = F10;
const ALT = 'alt';
/**
 * Keycode for CTRL key.
 */

exports.ALT = ALT;
const CTRL = 'ctrl';
/**
 * Keycode for COMMAND/META key.
 */

exports.CTRL = CTRL;
const COMMAND = 'meta';
/**
 * Keycode for SHIFT key.
 */

exports.COMMAND = COMMAND;
const SHIFT = 'shift';
/**
 * Keycode for ZERO key.
 */

exports.SHIFT = SHIFT;
const ZERO = 48;
/**
 * Object that contains functions that return the available modifier
 * depending on platform.
 *
 * @type {WPModifierHandler< ( isApple: () => boolean ) => WPModifierPart[]>}
 */

exports.ZERO = ZERO;
const modifiers = {
  primary: _isApple => _isApple() ? [COMMAND] : [CTRL],
  primaryShift: _isApple => _isApple() ? [SHIFT, COMMAND] : [CTRL, SHIFT],
  primaryAlt: _isApple => _isApple() ? [ALT, COMMAND] : [CTRL, ALT],
  secondary: _isApple => _isApple() ? [SHIFT, ALT, COMMAND] : [CTRL, SHIFT, ALT],
  access: _isApple => _isApple() ? [CTRL, ALT] : [SHIFT, ALT],
  ctrl: () => [CTRL],
  alt: () => [ALT],
  ctrlShift: () => [CTRL, SHIFT],
  shift: () => [SHIFT],
  shiftAlt: () => [SHIFT, ALT],
  undefined: () => []
};
/**
 * An object that contains functions to get raw shortcuts.
 *
 * These are intended for user with the KeyboardShortcuts.
 *
 * @example
 * ```js
 * // Assuming macOS:
 * rawShortcut.primary( 'm' )
 * // "meta+m""
 * ```
 *
 * @type {WPModifierHandler<WPKeyHandler<string>>} Keyed map of functions to raw
 *                                                 shortcuts.
 */

exports.modifiers = modifiers;
const rawShortcut = (0, _lodash.mapValues)(modifiers, modifier => {
  return (
    /** @type {WPKeyHandler<string>} */
    function (character) {
      let _isApple = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _platform.isAppleOS;

      return [...modifier(_isApple), character.toLowerCase()].join('+');
    }
  );
});
/**
 * Return an array of the parts of a keyboard shortcut chord for display.
 *
 * @example
 * ```js
 * // Assuming macOS:
 * displayShortcutList.primary( 'm' );
 * // [ "⌘", "M" ]
 * ```
 *
 * @type {WPModifierHandler<WPKeyHandler<string[]>>} Keyed map of functions to
 *                                                   shortcut sequences.
 */

exports.rawShortcut = rawShortcut;
const displayShortcutList = (0, _lodash.mapValues)(modifiers, modifier => {
  return (
    /** @type {WPKeyHandler<string[]>} */
    function (character) {
      let _isApple = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _platform.isAppleOS;

      const isApple = _isApple();

      const replacementKeyMap = {
        [ALT]: isApple ? '⌥' : 'Alt',
        [CTRL]: isApple ? '⌃' : 'Ctrl',
        // Make sure ⌃ is the U+2303 UP ARROWHEAD unicode character and not the caret character.
        [COMMAND]: '⌘',
        [SHIFT]: isApple ? '⇧' : 'Shift'
      };
      const modifierKeys = modifier(_isApple).reduce((accumulator, key) => {
        const replacementKey = (0, _lodash.get)(replacementKeyMap, key, key); // If on the Mac, adhere to platform convention and don't show plus between keys.

        if (isApple) {
          return [...accumulator, replacementKey];
        }

        return [...accumulator, replacementKey, '+'];
      },
      /** @type {string[]} */
      []);
      const capitalizedCharacter = (0, _lodash.capitalize)(character);
      return [...modifierKeys, capitalizedCharacter];
    }
  );
});
/**
 * An object that contains functions to display shortcuts.
 *
 * @example
 * ```js
 * // Assuming macOS:
 * displayShortcut.primary( 'm' );
 * // "⌘M"
 * ```
 *
 * @type {WPModifierHandler<WPKeyHandler<string>>} Keyed map of functions to
 *                                                 display shortcuts.
 */

exports.displayShortcutList = displayShortcutList;
const displayShortcut = (0, _lodash.mapValues)(displayShortcutList, shortcutList => {
  return (
    /** @type {WPKeyHandler<string>} */
    function (character) {
      let _isApple = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _platform.isAppleOS;

      return shortcutList(character, _isApple).join('');
    }
  );
});
/**
 * An object that contains functions to return an aria label for a keyboard
 * shortcut.
 *
 * @example
 * ```js
 * // Assuming macOS:
 * shortcutAriaLabel.primary( '.' );
 * // "Command + Period"
 * ```
 *
 * @type {WPModifierHandler<WPKeyHandler<string>>} Keyed map of functions to
 *                                                 shortcut ARIA labels.
 */

exports.displayShortcut = displayShortcut;
const shortcutAriaLabel = (0, _lodash.mapValues)(modifiers, modifier => {
  return (
    /** @type {WPKeyHandler<string>} */
    function (character) {
      let _isApple = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _platform.isAppleOS;

      const isApple = _isApple();

      const replacementKeyMap = {
        [SHIFT]: 'Shift',
        [COMMAND]: isApple ? 'Command' : 'Control',
        [CTRL]: 'Control',
        [ALT]: isApple ? 'Option' : 'Alt',

        /* translators: comma as in the character ',' */
        ',': (0, _i18n.__)('Comma'),

        /* translators: period as in the character '.' */
        '.': (0, _i18n.__)('Period'),

        /* translators: backtick as in the character '`' */
        '`': (0, _i18n.__)('Backtick')
      };
      return [...modifier(_isApple), character].map(key => (0, _lodash.capitalize)((0, _lodash.get)(replacementKeyMap, key, key))).join(isApple ? ' ' : ' + ');
    }
  );
});
/**
 * From a given KeyboardEvent, returns an array of active modifier constants for
 * the event.
 *
 * @param {KeyboardEvent} event Keyboard event.
 *
 * @return {Array<WPModifierPart>} Active modifier constants.
 */

exports.shortcutAriaLabel = shortcutAriaLabel;

function getEventModifiers(event) {
  return (
    /** @type {WPModifierPart[]} */
    [ALT, CTRL, COMMAND, SHIFT].filter(key => event[
    /** @type {'altKey' | 'ctrlKey' | 'metaKey' | 'shiftKey'} */
    `${key}Key`])
  );
}
/**
 * An object that contains functions to check if a keyboard event matches a
 * predefined shortcut combination.
 *
 * @example
 * ```js
 * // Assuming an event for ⌘M key press:
 * isKeyboardEvent.primary( event, 'm' );
 * // true
 * ```
 *
 * @type {WPModifierHandler<WPEventKeyHandler>} Keyed map of functions
 *                                                       to match events.
 */


const isKeyboardEvent = (0, _lodash.mapValues)(modifiers, getModifiers => {
  return (
    /** @type {WPEventKeyHandler} */
    function (event, character) {
      let _isApple = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _platform.isAppleOS;

      const mods = getModifiers(_isApple);
      const eventMods = getEventModifiers(event);

      if ((0, _lodash.xor)(mods, eventMods).length) {
        return false;
      }

      let key = event.key.toLowerCase();

      if (!character) {
        return (0, _lodash.includes)(mods, key);
      }

      if (event.altKey && character.length === 1) {
        key = String.fromCharCode(event.keyCode).toLowerCase();
      } // For backwards compatibility.


      if (character === 'del') {
        character = 'delete';
      }

      return key === character.toLowerCase();
    }
  );
});
exports.isKeyboardEvent = isKeyboardEvent;
//# sourceMappingURL=index.js.map