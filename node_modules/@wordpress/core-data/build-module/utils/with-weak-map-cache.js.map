{"version":3,"sources":["@wordpress/core-data/src/utils/with-weak-map-cache.js"],"names":["withWeakMapCache","fn","cache","WeakMap","key","value","has","get","set"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,gBAAT,CAA2BC,EAA3B,EAAgC;AAC/B,QAAMC,KAAK,GAAG,IAAIC,OAAJ,EAAd;AAEA,SAASC,GAAF,IAAW;AACjB,QAAIC,KAAJ;;AACA,QAAKH,KAAK,CAACI,GAAN,CAAWF,GAAX,CAAL,EAAwB;AACvBC,MAAAA,KAAK,GAAGH,KAAK,CAACK,GAAN,CAAWH,GAAX,CAAR;AACA,KAFD,MAEO;AACNC,MAAAA,KAAK,GAAGJ,EAAE,CAAEG,GAAF,CAAV,CADM,CAGN;AACA;AACA;;AACA,UAAKA,GAAG,KAAK,IAAR,IAAgB,OAAOA,GAAP,KAAe,QAApC,EAA+C;AAC9CF,QAAAA,KAAK,CAACM,GAAN,CAAWJ,GAAX,EAAgBC,KAAhB;AACA;AACD;;AAED,WAAOA,KAAP;AACA,GAhBD;AAiBA;;AAED,eAAeL,gBAAf","sourcesContent":["/**\n * Given a function, returns an enhanced function which caches the result and\n * tracks in WeakMap. The result is only cached if the original function is\n * passed a valid object-like argument (requirement for WeakMap key).\n *\n * @param {Function} fn Original function.\n *\n * @return {Function} Enhanced caching function.\n */\nfunction withWeakMapCache( fn ) {\n\tconst cache = new WeakMap();\n\n\treturn ( key ) => {\n\t\tlet value;\n\t\tif ( cache.has( key ) ) {\n\t\t\tvalue = cache.get( key );\n\t\t} else {\n\t\t\tvalue = fn( key );\n\n\t\t\t// Can reach here if key is not valid for WeakMap, since `has`\n\t\t\t// will return false for invalid key. Since `set` will throw,\n\t\t\t// ensure that key is valid before setting into cache.\n\t\t\tif ( key !== null && typeof key === 'object' ) {\n\t\t\t\tcache.set( key, value );\n\t\t\t}\n\t\t}\n\n\t\treturn value;\n\t};\n}\n\nexport default withWeakMapCache;\n"]}