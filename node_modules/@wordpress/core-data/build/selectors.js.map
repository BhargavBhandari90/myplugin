{"version":3,"sources":["@wordpress/core-data/src/selectors.ts"],"names":["EMPTY_OBJECT","isRequestingEmbedPreview","select","state","url","STORE_NAME","isResolving","getAuthors","query","since","alternative","path","getUserQueryResults","getCurrentUser","currentUser","queryID","queryResults","users","queries","id","byId","getEntitiesByKind","kind","getEntitiesConfig","entities","config","getEntity","name","getEntityConfig","getEntityRecord","key","queriedState","records","undefined","context","itemIsComplete","items","item","_fields","filteredItem","fields","f","length","field","split","value","recordId","__experimentalGetEntityRecordNoResolver","getRawEntityRecord","record","Object","keys","reduce","accumulator","_key","hasEntityRecords","Array","isArray","getEntityRecords","__experimentalGetDirtyEntityRecords","dirtyRecords","forEach","primaryKeys","edits","filter","primaryKey","hasEditsForEntityRecord","entityConfig","entityRecord","getEditedEntityRecord","push","DEFAULT_ENTITY_KEY","title","getTitle","__experimentalGetEntitiesBeingSaved","recordsBeingSaved","saving","isSavingEntityRecord","getEntityRecordEdits","getEntityRecordNonTransientEdits","transientEdits","acc","isAutosavingEntityRecord","pending","isAutosave","Boolean","isDeletingEntityRecord","getLastEntitySaveError","getLastEntityDeleteError","getCurrentUndoOffset","undo","offset","getUndoEdit","getRedoEdit","hasUndo","hasRedo","getCurrentTheme","currentTheme","__experimentalGetCurrentGlobalStylesId","currentGlobalStylesId","getThemeSupports","theme_supports","getEmbedPreview","embedPreviews","isPreviewEmbedFallback","preview","oEmbedLinkCheck","html","canUser","action","resource","join","canUserEditEntityRecord","__unstable_rest_base","getAutosaves","postType","postId","autosaves","getAutosave","authorId","author","hasFetchedAutosaves","hasFinishedResolution","getReferenceByDistinctEdits","flattenedUndo","__experimentalGetTemplateForLink","link","template","__experimentalGetCurrentThemeBaseGlobalStyles","themeBaseGlobalStyles","stylesheet","__experimentalGetCurrentThemeGlobalStylesVariations","themeGlobalStyleVariations","getBlockPatterns","blockPatterns","getBlockPatternCategories","blockPatternCategories"],"mappings":"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","sourcesContent":["/**\n * External dependencies\n */\nimport createSelector from 'rememo';\nimport { set, map, find, get, filter, compact } from 'lodash';\n\n/**\n * WordPress dependencies\n */\nimport { createRegistrySelector } from '@wordpress/data';\nimport { addQueryArgs } from '@wordpress/url';\nimport deprecated from '@wordpress/deprecated';\n\n/**\n * Internal dependencies\n */\nimport { STORE_NAME } from './name';\nimport { getQueriedItems } from './queried-data';\nimport { DEFAULT_ENTITY_KEY } from './entities';\nimport { getNormalizedCommaSeparable, isRawAttribute } from './utils';\nimport type {\n\tContext,\n\tDefaultContextOf,\n\tEntityRecordOf,\n\tKeyOf,\n\tKind,\n\tKindOf,\n\tName,\n\tNameOf,\n\tUser,\n\tWpTemplate,\n} from './entity-types';\n\n// This is an incomplete, high-level approximation of the State type.\n// It makes the selectors slightly more safe, but is intended to evolve\n// into a more detailed representation over time.\n// See https://github.com/WordPress/gutenberg/pull/40025#discussion_r865410589 for more context.\ninterface State {\n\tautosaves: Record< string | number, Array< unknown > >;\n\tblockPatterns: Array< unknown >;\n\tblockPatternCategories: Array< unknown >;\n\tcurrentGlobalStylesId: string;\n\tcurrentTheme: string;\n\tcurrentUser: User< 'edit' >;\n\tembedPreviews: Record< string, { html: string } >;\n\tentities: EntitiesState;\n\tthemeBaseGlobalStyles: Record< string, Object >;\n\tthemeGlobalStyleVariations: Record< string, string >;\n\tundo: UndoState;\n\tusers: UserState;\n}\n\ninterface EntitiesState {\n\tconfig: EntityConfig[];\n\trecords: Record< Kind, Record< Name, EntityState< Kind, Name > > >;\n}\n\ninterface EntityState< K extends Kind, N extends Name > {\n\tedits: Record< KeyOf< K, N >, Partial< EntityRecordOf< K, N > > >;\n\tsaving: Record< KeyOf< K, N >, { pending: boolean } >;\n}\n\ninterface EntityConfig {\n\tname: Name;\n\tkind: Kind;\n}\n\ninterface UndoState extends Array< Object > {\n\tflattenedUndo: unknown;\n\toffset: number;\n}\n\ninterface UserState {\n\tqueries: Record< string, GenericRecordKey[] >;\n\tbyId: Record< GenericRecordKey, User< 'edit' > >;\n}\n\ntype GenericRecordKey = number | string;\ntype EntityRecord = any;\ntype Optional< T > = T | undefined;\n\n/**\n * HTTP Query parameters sent with the API request to fetch the entity records.\n */\nexport type EntityQuery<\n\tC extends Context,\n\tWithFields extends boolean = true\n> = Omit< Record< string, any >, '_fields' > & {\n\tcontext?: C;\n} & ( WithFields extends true\n\t\t? {\n\t\t\t\t/**\n\t\t\t\t * The requested fields. If specified, the REST API will remove from the response\n\t\t\t\t * any fields not on that list.\n\t\t\t\t */\n\t\t\t\t_fields: string[];\n\t\t  }\n\t\t: {} );\n\n/**\n * Shared reference to an empty object for cases where it is important to avoid\n * returning a new object reference on every invocation, as in a connected or\n * other pure component which performs `shouldComponentUpdate` check on props.\n * This should be used as a last resort, since the normalized data should be\n * maintained by the reducer result in state.\n */\nconst EMPTY_OBJECT = {};\n\n/**\n * Returns true if a request is in progress for embed preview data, or false\n * otherwise.\n *\n * @param  state Data state.\n * @param  url   URL the preview would be for.\n *\n * @return Whether a request is in progress for an embed preview.\n */\nexport const isRequestingEmbedPreview = createRegistrySelector(\n\t( select ) =>\n\t\t( state: State, url: string ): boolean => {\n\t\t\treturn select( STORE_NAME ).isResolving( 'getEmbedPreview', [\n\t\t\t\turl,\n\t\t\t] );\n\t\t}\n);\n\n/**\n * Returns all available authors.\n *\n * @deprecated since 11.3. Callers should use `select( 'core' ).getUsers({ who: 'authors' })` instead.\n *\n * @param  state Data state.\n * @param  query Optional object of query parameters to\n *               include with request.\n * @return Authors list.\n */\nexport function getAuthors(\n\tstate: State,\n\tquery?: EntityQuery< any >\n): User< 'edit' >[] {\n\tdeprecated( \"select( 'core' ).getAuthors()\", {\n\t\tsince: '5.9',\n\t\talternative: \"select( 'core' ).getUsers({ who: 'authors' })\",\n\t} );\n\n\tconst path = addQueryArgs(\n\t\t'/wp/v2/users/?who=authors&per_page=100',\n\t\tquery\n\t);\n\treturn getUserQueryResults( state, path );\n}\n\n/**\n * Returns the current user.\n *\n * @param  state Data state.\n *\n * @return Current user object.\n */\nexport function getCurrentUser( state: State ): User< 'edit' > {\n\treturn state.currentUser;\n}\n\n/**\n * Returns all the users returned by a query ID.\n *\n * @param  state   Data state.\n * @param  queryID Query ID.\n *\n * @return Users list.\n */\nexport const getUserQueryResults = createSelector(\n\t( state: State, queryID: string ): User< 'edit' >[] => {\n\t\tconst queryResults = state.users.queries[ queryID ];\n\n\t\treturn map( queryResults, ( id ) => state.users.byId[ id ] );\n\t},\n\t( state: State, queryID: string ) => [\n\t\tstate.users.queries[ queryID ],\n\t\tstate.users.byId,\n\t]\n);\n\n/**\n * Returns the loaded entities for the given kind.\n *\n * @deprecated since WordPress 6.0. Use getEntitiesConfig instead\n * @param  state Data state.\n * @param  kind  Entity kind.\n *\n * @return Array of entities with config matching kind.\n */\nexport function getEntitiesByKind( state: State, kind: Kind ): Array< any > {\n\tdeprecated( \"wp.data.select( 'core' ).getEntitiesByKind()\", {\n\t\tsince: '6.0',\n\t\talternative: \"wp.data.select( 'core' ).getEntitiesConfig()\",\n\t} );\n\treturn getEntitiesConfig( state, kind );\n}\n\n/**\n * Returns the loaded entities for the given kind.\n *\n * @param  state Data state.\n * @param  kind  Entity kind.\n *\n * @return Array of entities with config matching kind.\n */\nexport function getEntitiesConfig( state: State, kind: Kind ): Array< any > {\n\treturn filter( state.entities.config, { kind } );\n}\n\n/**\n * Returns the entity config given its kind and name.\n *\n * @deprecated since WordPress 6.0. Use getEntityConfig instead\n * @param  state Data state.\n * @param  kind  Entity kind.\n * @param  name  Entity name.\n *\n * @return Entity config\n */\nexport function getEntity( state: State, kind: Kind, name: Name ): any {\n\tdeprecated( \"wp.data.select( 'core' ).getEntity()\", {\n\t\tsince: '6.0',\n\t\talternative: \"wp.data.select( 'core' ).getEntityConfig()\",\n\t} );\n\treturn getEntityConfig( state, kind, name );\n}\n\n/**\n * Returns the entity config given its kind and name.\n *\n * @param  state Data state.\n * @param  kind  Entity kind.\n * @param  name  Entity name.\n *\n * @return Entity config\n */\nexport function getEntityConfig( state: State, kind: Kind, name: Name ): any {\n\treturn find( state.entities.config, { kind, name } );\n}\n\n/**\n * GetEntityRecord is declared as an *interface*, but it actually describes\n * the specifies the getEntityRecord *function* signature. It may seem unusual,\n * but it's just how TypeScript implements function overloading.\n *\n * More accurately, GetEntityRecord distinguishes between two different signatures\n * the getEntityRecord selector has:\n *\n * 1. When query._fields is not given, the returned type is EntityRecordOf< K, N, C >\n * 2. When query._fields is given, the returned type is Partial<EntityRecordOf< K, N, C >>\n *\n * Unfortunately, due to a TypeScript limitation (https://github.com/microsoft/TypeScript/issues/23132)\n * we can't use a single function signature with a return type such as:\n *\n *    Fields extends undefined\n * \t    ? EntityRecordOf< K, N, C >\n * \t\t  : Partial< EntityRecordOf< K, N, C > >\n */\ninterface GetEntityRecord {\n\t<\n\t\tR extends EntityRecordOf< K, N >,\n\t\tC extends Context = DefaultContextOf< R >,\n\t\tK extends Kind = KindOf< R >,\n\t\tN extends Name = NameOf< R >\n\t>(\n\t\tstate: State,\n\t\tkind: K,\n\t\tname: N,\n\t\tkey: KeyOf< K, N >,\n\t\tquery: EntityQuery< C, true >\n\t): Partial< EntityRecordOf< K, N, C > > | null | undefined;\n\n\t<\n\t\tR extends EntityRecordOf< K, N >,\n\t\tC extends Context = DefaultContextOf< R >,\n\t\tK extends Kind = KindOf< R >,\n\t\tN extends Name = NameOf< R >\n\t>(\n\t\tstate: State,\n\t\tkind: K,\n\t\tname: N,\n\t\tkey: KeyOf< K, N >,\n\t\tquery?: EntityQuery< C, false >\n\t): EntityRecordOf< K, N, C > | null | undefined;\n}\n\n/**\n * Returns the Entity's record object by key. Returns `null` if the value is not\n * yet received, undefined if the value entity is known to not exist, or the\n * entity object if it exists and is received.\n *\n * @param  state State tree\n * @param  kind  Entity kind.\n * @param  name  Entity name.\n * @param  key   Record's key\n * @param  query Optional query.\n *\n * @return Record.\n */\nexport const getEntityRecord: GetEntityRecord = createSelector(\n\t<\n\t\tR extends EntityRecordOf< K, N >,\n\t\tC extends Context = DefaultContextOf< R >,\n\t\tK extends Kind = KindOf< R >,\n\t\tN extends Name = NameOf< R >\n\t>(\n\t\tstate: State,\n\t\tkind: K,\n\t\tname: N,\n\t\tkey: KeyOf< R >,\n\t\tquery\n\t) => {\n\t\tconst queriedState = get( state.entities.records, [\n\t\t\tkind,\n\t\t\tname,\n\t\t\t'queriedData',\n\t\t] );\n\t\tif ( ! queriedState ) {\n\t\t\treturn undefined;\n\t\t}\n\t\tconst context = query?.context ?? 'default';\n\n\t\tif ( query === undefined ) {\n\t\t\t// If expecting a complete item, validate that completeness.\n\t\t\tif ( ! queriedState.itemIsComplete[ context ]?.[ key ] ) {\n\t\t\t\treturn undefined;\n\t\t\t}\n\n\t\t\treturn queriedState.items[ context ][ key ];\n\t\t}\n\n\t\tconst item = queriedState.items[ context ]?.[ key ];\n\t\tif ( item && query._fields ) {\n\t\t\tconst filteredItem = {};\n\t\t\tconst fields = getNormalizedCommaSeparable( query._fields ) ?? [];\n\t\t\tfor ( let f = 0; f < fields.length; f++ ) {\n\t\t\t\tconst field = fields[ f ].split( '.' );\n\t\t\t\tconst value = get( item, field );\n\t\t\t\tset( filteredItem, field, value );\n\t\t\t}\n\t\t\treturn filteredItem;\n\t\t}\n\n\t\treturn item;\n\t},\n\t( state: State, kind, name, recordId, query ) => {\n\t\tconst context = query?.context ?? 'default';\n\t\treturn [\n\t\t\tget( state.entities.records, [\n\t\t\t\tkind,\n\t\t\t\tname,\n\t\t\t\t'queriedData',\n\t\t\t\t'items',\n\t\t\t\tcontext,\n\t\t\t\trecordId,\n\t\t\t] ),\n\t\t\tget( state.entities.records, [\n\t\t\t\tkind,\n\t\t\t\tname,\n\t\t\t\t'queriedData',\n\t\t\t\t'itemIsComplete',\n\t\t\t\tcontext,\n\t\t\t\trecordId,\n\t\t\t] ),\n\t\t];\n\t}\n);\n\n/**\n * Returns the Entity's record object by key. Doesn't trigger a resolver nor requests the entity records from the API if the entity record isn't available in the local state.\n *\n * @param  state State tree\n * @param  kind  Entity kind.\n * @param  name  Entity name.\n * @param  key   Record's key\n *\n * @return Record.\n */\nexport function __experimentalGetEntityRecordNoResolver<\n\tK extends Kind,\n\tN extends Name\n>( state: State, kind: K, name: N, key: KeyOf< K, N > ) {\n\treturn getEntityRecord( state, kind, name, key );\n}\n\n/**\n * Returns the entity's record object by key,\n * with its attributes mapped to their raw values.\n *\n * @param  state State tree.\n * @param  kind  Entity kind.\n * @param  name  Entity name.\n * @param  key   Record's key.\n *\n * @return Object with the entity's raw attributes.\n */\nexport const getRawEntityRecord = createSelector(\n\t< K extends Kind, N extends Name >(\n\t\tstate: State,\n\t\tkind: K,\n\t\tname: N,\n\t\tkey: KeyOf< K, N >\n\t): EntityRecord | undefined => {\n\t\tconst record = getEntityRecord( state, kind, name, key );\n\t\treturn (\n\t\t\trecord &&\n\t\t\tObject.keys( record ).reduce( ( accumulator, _key ) => {\n\t\t\t\tif (\n\t\t\t\t\tisRawAttribute( getEntityConfig( state, kind, name ), _key )\n\t\t\t\t) {\n\t\t\t\t\t// Because edits are the \"raw\" attribute values,\n\t\t\t\t\t// we return those from record selectors to make rendering,\n\t\t\t\t\t// comparisons, and joins with edits easier.\n\t\t\t\t\taccumulator[ _key ] = get(\n\t\t\t\t\t\trecord[ _key ],\n\t\t\t\t\t\t'raw',\n\t\t\t\t\t\trecord[ _key ]\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\taccumulator[ _key ] = record[ _key ];\n\t\t\t\t}\n\t\t\t\treturn accumulator;\n\t\t\t}, {} )\n\t\t);\n\t},\n\t(\n\t\tstate: State,\n\t\tkind: Kind,\n\t\tname: Name,\n\t\trecordId: GenericRecordKey,\n\t\tquery?: EntityQuery< any >\n\t) => {\n\t\tconst context = query?.context ?? 'default';\n\t\treturn [\n\t\t\tstate.entities.config,\n\t\t\tget( state.entities.records, [\n\t\t\t\tkind,\n\t\t\t\tname,\n\t\t\t\t'queriedData',\n\t\t\t\t'items',\n\t\t\t\tcontext,\n\t\t\t\trecordId,\n\t\t\t] ),\n\t\t\tget( state.entities.records, [\n\t\t\t\tkind,\n\t\t\t\tname,\n\t\t\t\t'queriedData',\n\t\t\t\t'itemIsComplete',\n\t\t\t\tcontext,\n\t\t\t\trecordId,\n\t\t\t] ),\n\t\t];\n\t}\n);\n\n/**\n * Returns true if records have been received for the given set of parameters,\n * or false otherwise.\n *\n * @param  state State tree\n * @param  kind  Entity kind.\n * @param  name  Entity name.\n * @param  query Optional terms query.\n *\n * @return  Whether entity records have been received.\n */\nexport function hasEntityRecords<\n\tR extends EntityRecordOf< K, N >,\n\tC extends Context = DefaultContextOf< R >,\n\tK extends Kind = KindOf< R >,\n\tN extends Name = NameOf< R >\n>( state: State, kind: K, name: N, query?: EntityQuery< C > ): boolean {\n\treturn Array.isArray( getEntityRecords( state, kind, name, query ) );\n}\n\n/**\n * GetEntityRecord is declared as an *interface*, but it actually describes\n * the specifies the getEntityRecord *function* signature. It may seem unusual,\n * but it's just how TypeScript implements function overloading.\n *\n * More accurately, GetEntityRecord distinguishes between two different signatures\n * the getEntityRecord selector has:\n *\n * 1. When query._fields is not given, the returned type is EntityRecordOf< K, N, C >[]\n * 2. When query._fields is given, the returned type is Partial<EntityRecordOf< K, N, C >>[]\n *\n * Unfortunately, due to a TypeScript limitation (https://github.com/microsoft/TypeScript/issues/23132)\n * we can't use a single function signature with a return type such as:\n *\n *    Fields extends undefined\n * \t    ? EntityRecordOf< K, N, C >[]\n * \t\t  : Partial< EntityRecordOf< K, N, C > >[]\n */\ninterface GetEntityRecords {\n\t<\n\t\tR extends EntityRecordOf< K, N >,\n\t\tC extends Context = DefaultContextOf< R >,\n\t\tK extends Kind = KindOf< R >,\n\t\tN extends Name = NameOf< R >\n\t>(\n\t\tstate: State,\n\t\tkind: K,\n\t\tname: N,\n\t\tquery: EntityQuery< C, true >\n\t): Partial< EntityRecordOf< K, N, C > >[] | null | undefined;\n\n\t<\n\t\tR extends EntityRecordOf< K, N >,\n\t\tC extends Context = DefaultContextOf< R >,\n\t\tK extends Kind = KindOf< R >,\n\t\tN extends Name = NameOf< R >\n\t>(\n\t\tstate: State,\n\t\tkind: K,\n\t\tname: N,\n\t\tquery?: EntityQuery< C, false >\n\t): EntityRecordOf< K, N, C >[] | null | undefined;\n}\n\n/**\n * Returns the Entity's records.\n *\n * @param  state State tree\n * @param  kind  Entity kind.\n * @param  name  Entity name.\n * @param  query Optional terms query.\n *\n * @return Records.\n */\nexport const getEntityRecords: GetEntityRecords = <\n\tR extends EntityRecordOf< K, N >,\n\tC extends Context = DefaultContextOf< R >,\n\tK extends Kind = KindOf< R >,\n\tN extends Name = NameOf< R >\n>(\n\tstate: State,\n\tkind: K,\n\tname: N,\n\tquery\n) => {\n\t// Queried data state is prepopulated for all known entities. If this is not\n\t// assigned for the given parameters, then it is known to not exist.\n\tconst queriedState = get( state.entities.records, [\n\t\tkind,\n\t\tname,\n\t\t'queriedData',\n\t] );\n\tif ( ! queriedState ) {\n\t\treturn null;\n\t}\n\treturn getQueriedItems( queriedState, query );\n};\n\ntype DirtyEntityRecord = {\n\ttitle: string;\n\tkey: GenericRecordKey;\n\tname: Name;\n\tkind: Kind;\n};\n/**\n * Returns the list of dirty entity records.\n *\n * @param  state State tree.\n *\n * @return The list of updated records\n */\nexport const __experimentalGetDirtyEntityRecords = createSelector(\n\t( state: State ): Array< DirtyEntityRecord > => {\n\t\tconst {\n\t\t\tentities: { records },\n\t\t} = state;\n\t\tconst dirtyRecords: DirtyEntityRecord[] = [];\n\t\t( Object.keys( records ) as Kind[] ).forEach(\n\t\t\t< K extends Kind >( kind: K ) => {\n\t\t\t\t( Object.keys( records[ kind ] ) as Name[] ).forEach(\n\t\t\t\t\t< N extends Name >( name: N ) => {\n\t\t\t\t\t\tconst primaryKeys = (\n\t\t\t\t\t\t\tObject.keys(\n\t\t\t\t\t\t\t\trecords[ kind ][ name ].edits\n\t\t\t\t\t\t\t) as KeyOf< K, N >[]\n\t\t\t\t\t\t ).filter(\n\t\t\t\t\t\t\t( primaryKey ) =>\n\t\t\t\t\t\t\t\t// The entity record must exist (not be deleted),\n\t\t\t\t\t\t\t\t// and it must have edits.\n\t\t\t\t\t\t\t\tgetEntityRecord(\n\t\t\t\t\t\t\t\t\tstate,\n\t\t\t\t\t\t\t\t\tkind,\n\t\t\t\t\t\t\t\t\tname,\n\t\t\t\t\t\t\t\t\tprimaryKey\n\t\t\t\t\t\t\t\t) &&\n\t\t\t\t\t\t\t\thasEditsForEntityRecord(\n\t\t\t\t\t\t\t\t\tstate,\n\t\t\t\t\t\t\t\t\tkind,\n\t\t\t\t\t\t\t\t\tname,\n\t\t\t\t\t\t\t\t\tprimaryKey\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tif ( primaryKeys.length ) {\n\t\t\t\t\t\t\tconst entityConfig = getEntityConfig(\n\t\t\t\t\t\t\t\tstate,\n\t\t\t\t\t\t\t\tkind,\n\t\t\t\t\t\t\t\tname\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tprimaryKeys.forEach( ( primaryKey ) => {\n\t\t\t\t\t\t\t\tconst entityRecord = getEditedEntityRecord(\n\t\t\t\t\t\t\t\t\tstate,\n\t\t\t\t\t\t\t\t\tkind,\n\t\t\t\t\t\t\t\t\tname,\n\t\t\t\t\t\t\t\t\tprimaryKey\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\tdirtyRecords.push( {\n\t\t\t\t\t\t\t\t\t// We avoid using primaryKey because it's transformed into a string\n\t\t\t\t\t\t\t\t\t// when it's used as an object key.\n\t\t\t\t\t\t\t\t\tkey: entityRecord[\n\t\t\t\t\t\t\t\t\t\tentityConfig.key || DEFAULT_ENTITY_KEY\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\ttitle:\n\t\t\t\t\t\t\t\t\t\tentityConfig?.getTitle?.(\n\t\t\t\t\t\t\t\t\t\t\tentityRecord\n\t\t\t\t\t\t\t\t\t\t) || '',\n\t\t\t\t\t\t\t\t\tname,\n\t\t\t\t\t\t\t\t\tkind,\n\t\t\t\t\t\t\t\t} );\n\t\t\t\t\t\t\t} );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t}\n\t\t);\n\n\t\treturn dirtyRecords;\n\t},\n\t( state ) => [ state.entities.records ]\n);\n\n/**\n * Returns the list of entities currently being saved.\n *\n * @param  state State tree.\n *\n * @return The list of records being saved.\n */\nexport const __experimentalGetEntitiesBeingSaved = createSelector(\n\t( state: State ): Array< DirtyEntityRecord > => {\n\t\tconst {\n\t\t\tentities: { records },\n\t\t} = state;\n\t\tconst recordsBeingSaved: DirtyEntityRecord[] = [];\n\t\t( Object.keys( records ) as Kind[] ).forEach(\n\t\t\t< K extends Kind >( kind: K ) => {\n\t\t\t\t( Object.keys( records[ kind ] ) as Name[] ).forEach(\n\t\t\t\t\t< N extends Name >( name: N ) => {\n\t\t\t\t\t\tconst primaryKeys = (\n\t\t\t\t\t\t\tObject.keys(\n\t\t\t\t\t\t\t\trecords[ kind ][ name ].saving\n\t\t\t\t\t\t\t) as KeyOf< K, N >[]\n\t\t\t\t\t\t ).filter( ( primaryKey ) =>\n\t\t\t\t\t\t\tisSavingEntityRecord(\n\t\t\t\t\t\t\t\tstate,\n\t\t\t\t\t\t\t\tkind,\n\t\t\t\t\t\t\t\tname,\n\t\t\t\t\t\t\t\tprimaryKey\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tif ( primaryKeys.length ) {\n\t\t\t\t\t\t\tconst entityConfig = getEntityConfig(\n\t\t\t\t\t\t\t\tstate,\n\t\t\t\t\t\t\t\tkind,\n\t\t\t\t\t\t\t\tname\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tprimaryKeys.forEach( ( primaryKey ) => {\n\t\t\t\t\t\t\t\tconst entityRecord = getEditedEntityRecord(\n\t\t\t\t\t\t\t\t\tstate,\n\t\t\t\t\t\t\t\t\tkind,\n\t\t\t\t\t\t\t\t\tname,\n\t\t\t\t\t\t\t\t\tprimaryKey\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\trecordsBeingSaved.push( {\n\t\t\t\t\t\t\t\t\t// We avoid using primaryKey because it's transformed into a string\n\t\t\t\t\t\t\t\t\t// when it's used as an object key.\n\t\t\t\t\t\t\t\t\tkey: entityRecord[\n\t\t\t\t\t\t\t\t\t\tentityConfig.key || DEFAULT_ENTITY_KEY\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\ttitle:\n\t\t\t\t\t\t\t\t\t\tentityConfig?.getTitle?.(\n\t\t\t\t\t\t\t\t\t\t\tentityRecord\n\t\t\t\t\t\t\t\t\t\t) || '',\n\t\t\t\t\t\t\t\t\tname,\n\t\t\t\t\t\t\t\t\tkind,\n\t\t\t\t\t\t\t\t} );\n\t\t\t\t\t\t\t} );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t}\n\t\t);\n\t\treturn recordsBeingSaved;\n\t},\n\t( state ) => [ state.entities.records ]\n);\n\n/**\n * Returns the specified entity record's edits.\n *\n * @param  state    State tree.\n * @param  kind     Entity kind.\n * @param  name     Entity name.\n * @param  recordId Record ID.\n *\n * @return The entity record's edits.\n */\nexport function getEntityRecordEdits< K extends Kind, N extends Name >(\n\tstate: State,\n\tkind: K,\n\tname: N,\n\trecordId: KeyOf< K, N >\n): Optional< any > {\n\treturn get( state.entities.records, [\n\t\tkind,\n\t\tname,\n\t\t'edits',\n\t\trecordId as string | number,\n\t] );\n}\n\n/**\n * Returns the specified entity record's non transient edits.\n *\n * Transient edits don't create an undo level, and\n * are not considered for change detection.\n * They are defined in the entity's config.\n *\n * @param  state    State tree.\n * @param  kind     Entity kind.\n * @param  name     Entity name.\n * @param  recordId Record ID.\n *\n * @return The entity record's non transient edits.\n */\nexport const getEntityRecordNonTransientEdits = createSelector(\n\t< K extends Kind, N extends Name >(\n\t\tstate: State,\n\t\tkind: K,\n\t\tname: N,\n\t\trecordId: KeyOf< K, N >\n\t): Optional< any > => {\n\t\tconst { transientEdits } = getEntityConfig( state, kind, name ) || {};\n\t\tconst edits = getEntityRecordEdits( state, kind, name, recordId ) || {};\n\t\tif ( ! transientEdits ) {\n\t\t\treturn edits;\n\t\t}\n\t\treturn Object.keys( edits ).reduce( ( acc, key ) => {\n\t\t\tif ( ! transientEdits[ key ] ) {\n\t\t\t\tacc[ key ] = edits[ key ];\n\t\t\t}\n\t\t\treturn acc;\n\t\t}, {} );\n\t},\n\t( state: State, kind: Kind, name: Name, recordId: GenericRecordKey ) => [\n\t\tstate.entities.config,\n\t\tget( state.entities.records, [ kind, name, 'edits', recordId ] ),\n\t]\n);\n\n/**\n * Returns true if the specified entity record has edits,\n * and false otherwise.\n *\n * @param  state    State tree.\n * @param  kind     Entity kind.\n * @param  name     Entity name.\n * @param  recordId Record ID.\n *\n * @return Whether the entity record has edits or not.\n */\nexport function hasEditsForEntityRecord< K extends Kind, N extends Name >(\n\tstate: State,\n\tkind: K,\n\tname: N,\n\trecordId: KeyOf< K, N >\n): boolean {\n\treturn (\n\t\tisSavingEntityRecord( state, kind, name, recordId ) ||\n\t\tObject.keys(\n\t\t\tgetEntityRecordNonTransientEdits( state, kind, name, recordId )\n\t\t).length > 0\n\t);\n}\n\n/**\n * Returns the specified entity record, merged with its edits.\n *\n * @param  state    State tree.\n * @param  kind     Entity kind.\n * @param  name     Entity name.\n * @param  recordId Record ID.\n *\n * @return The entity record, merged with its edits.\n */\nexport const getEditedEntityRecord = createSelector(\n\t< K extends Kind, N extends Name >(\n\t\tstate: State,\n\t\tkind: K,\n\t\tname: N,\n\t\trecordId: KeyOf< K, N >\n\t): EntityRecord | undefined => ( {\n\t\t...getRawEntityRecord( state, kind, name, recordId ),\n\t\t...getEntityRecordEdits( state, kind, name, recordId ),\n\t} ),\n\t(\n\t\tstate: State,\n\t\tkind: Kind,\n\t\tname: Name,\n\t\trecordId: GenericRecordKey,\n\t\tquery?: EntityQuery< any >\n\t) => {\n\t\tconst context = query?.context ?? 'default';\n\t\treturn [\n\t\t\tstate.entities.config,\n\t\t\tget( state.entities.records, [\n\t\t\t\tkind,\n\t\t\t\tname,\n\t\t\t\t'queriedData',\n\t\t\t\t'items',\n\t\t\t\tcontext,\n\t\t\t\trecordId,\n\t\t\t] ),\n\t\t\tget( state.entities.records, [\n\t\t\t\tkind,\n\t\t\t\tname,\n\t\t\t\t'queriedData',\n\t\t\t\t'itemIsComplete',\n\t\t\t\tcontext,\n\t\t\t\trecordId,\n\t\t\t] ),\n\t\t\tget( state.entities.records, [ kind, name, 'edits', recordId ] ),\n\t\t];\n\t}\n);\n\n/**\n * Returns true if the specified entity record is autosaving, and false otherwise.\n *\n * @param  state    State tree.\n * @param  kind     Entity kind.\n * @param  name     Entity name.\n * @param  recordId Record ID.\n *\n * @return Whether the entity record is autosaving or not.\n */\nexport function isAutosavingEntityRecord(\n\tstate: State,\n\tkind: Kind,\n\tname: Name,\n\trecordId: GenericRecordKey\n): boolean {\n\tconst { pending, isAutosave } = get(\n\t\tstate.entities.records,\n\t\t[ kind, name, 'saving', recordId ],\n\t\t{}\n\t);\n\treturn Boolean( pending && isAutosave );\n}\n\n/**\n * Returns true if the specified entity record is saving, and false otherwise.\n *\n * @param  state    State tree.\n * @param  kind     Entity kind.\n * @param  name     Entity name.\n * @param  recordId Record ID.\n *\n * @return Whether the entity record is saving or not.\n */\nexport function isSavingEntityRecord< K extends Kind, N extends Name >(\n\tstate: State,\n\tkind: K,\n\tname: N,\n\trecordId: KeyOf< K, N >\n): boolean {\n\treturn get(\n\t\tstate.entities.records,\n\t\t[ kind, name, 'saving', recordId as GenericRecordKey, 'pending' ],\n\t\tfalse\n\t);\n}\n\n/**\n * Returns true if the specified entity record is deleting, and false otherwise.\n *\n * @param  state    State tree.\n * @param  kind     Entity kind.\n * @param  name     Entity name.\n * @param  recordId Record ID.\n *\n * @return Whether the entity record is deleting or not.\n */\nexport function isDeletingEntityRecord(\n\tstate: State,\n\tkind: Kind,\n\tname: Name,\n\trecordId: GenericRecordKey\n): boolean {\n\treturn get(\n\t\tstate.entities.records,\n\t\t[ kind, name, 'deleting', recordId, 'pending' ],\n\t\tfalse\n\t);\n}\n\n/**\n * Returns the specified entity record's last save error.\n *\n * @param  state    State tree.\n * @param  kind     Entity kind.\n * @param  name     Entity name.\n * @param  recordId Record ID.\n *\n * @return The entity record's save error.\n */\nexport function getLastEntitySaveError(\n\tstate: State,\n\tkind: Kind,\n\tname: Name,\n\trecordId: GenericRecordKey\n): any {\n\treturn get( state.entities.records, [\n\t\tkind,\n\t\tname,\n\t\t'saving',\n\t\trecordId,\n\t\t'error',\n\t] );\n}\n\n/**\n * Returns the specified entity record's last delete error.\n *\n * @param  state    State tree.\n * @param  kind     Entity kind.\n * @param  name     Entity name.\n * @param  recordId Record ID.\n *\n * @return The entity record's save error.\n */\nexport function getLastEntityDeleteError(\n\tstate: State,\n\tkind: Kind,\n\tname: Name,\n\trecordId: GenericRecordKey\n): any {\n\treturn get( state.entities.records, [\n\t\tkind,\n\t\tname,\n\t\t'deleting',\n\t\trecordId,\n\t\t'error',\n\t] );\n}\n\n/**\n * Returns the current undo offset for the\n * entity records edits history. The offset\n * represents how many items from the end\n * of the history stack we are at. 0 is the\n * last edit, -1 is the second last, and so on.\n *\n * @param  state State tree.\n *\n * @return The current undo offset.\n */\nfunction getCurrentUndoOffset( state: State ): number {\n\treturn state.undo.offset;\n}\n\n/**\n * Returns the previous edit from the current undo offset\n * for the entity records edits history, if any.\n *\n * @param  state State tree.\n *\n * @return The edit.\n */\nexport function getUndoEdit( state: State ): Optional< any > {\n\treturn state.undo[ state.undo.length - 2 + getCurrentUndoOffset( state ) ];\n}\n\n/**\n * Returns the next edit from the current undo offset\n * for the entity records edits history, if any.\n *\n * @param  state State tree.\n *\n * @return The edit.\n */\nexport function getRedoEdit( state: State ): Optional< any > {\n\treturn state.undo[ state.undo.length + getCurrentUndoOffset( state ) ];\n}\n\n/**\n * Returns true if there is a previous edit from the current undo offset\n * for the entity records edits history, and false otherwise.\n *\n * @param  state State tree.\n *\n * @return Whether there is a previous edit or not.\n */\nexport function hasUndo( state: State ): boolean {\n\treturn Boolean( getUndoEdit( state ) );\n}\n\n/**\n * Returns true if there is a next edit from the current undo offset\n * for the entity records edits history, and false otherwise.\n *\n * @param  state State tree.\n *\n * @return Whether there is a next edit or not.\n */\nexport function hasRedo( state: State ): boolean {\n\treturn Boolean( getRedoEdit( state ) );\n}\n\n/**\n * Return the current theme.\n *\n * @param  state Data state.\n *\n * @return The current theme.\n */\nexport function getCurrentTheme( state: State ): any {\n\treturn getEntityRecord( state, 'root', 'theme', state.currentTheme );\n}\n\n/**\n * Return the ID of the current global styles object.\n *\n * @param  state Data state.\n *\n * @return The current global styles ID.\n */\nexport function __experimentalGetCurrentGlobalStylesId( state: State ): string {\n\treturn state.currentGlobalStylesId;\n}\n\n/**\n * Return theme supports data in the index.\n *\n * @param  state Data state.\n *\n * @return Index data.\n */\nexport function getThemeSupports( state: State ): any {\n\treturn getCurrentTheme( state )?.theme_supports ?? EMPTY_OBJECT;\n}\n\n/**\n * Returns the embed preview for the given URL.\n *\n * @param  state Data state.\n * @param  url   Embedded URL.\n *\n * @return Undefined if the preview has not been fetched, otherwise, the preview fetched from the embed preview API.\n */\nexport function getEmbedPreview( state: State, url: string ): any {\n\treturn state.embedPreviews[ url ];\n}\n\n/**\n * Determines if the returned preview is an oEmbed link fallback.\n *\n * WordPress can be configured to return a simple link to a URL if it is not embeddable.\n * We need to be able to determine if a URL is embeddable or not, based on what we\n * get back from the oEmbed preview API.\n *\n * @param  state Data state.\n * @param  url   Embedded URL.\n *\n * @return Is the preview for the URL an oEmbed link fallback.\n */\nexport function isPreviewEmbedFallback( state: State, url: string ): boolean {\n\tconst preview = state.embedPreviews[ url ];\n\tconst oEmbedLinkCheck = '<a href=\"' + url + '\">' + url + '</a>';\n\tif ( ! preview ) {\n\t\treturn false;\n\t}\n\treturn preview.html === oEmbedLinkCheck;\n}\n\n/**\n * Returns whether the current user can perform the given action on the given\n * REST resource.\n *\n * Calling this may trigger an OPTIONS request to the REST API via the\n * `canUser()` resolver.\n *\n * https://developer.wordpress.org/rest-api/reference/\n *\n * @param  state    Data state.\n * @param  action   Action to check. One of: 'create', 'read', 'update', 'delete'.\n * @param  resource REST resource to check, e.g. 'media' or 'posts'.\n * @param  id       Optional ID of the rest resource to check.\n *\n * @return Whether or not the user can perform the action,\n *                             or `undefined` if the OPTIONS request is still being made.\n */\nexport function canUser(\n\tstate: State,\n\taction: string,\n\tresource: string,\n\tid?: GenericRecordKey\n): boolean | undefined {\n\tconst key = compact( [ action, resource, id ] ).join( '/' );\n\treturn get( state, [ 'userPermissions', key ] );\n}\n\n/**\n * Returns whether the current user can edit the given entity.\n *\n * Calling this may trigger an OPTIONS request to the REST API via the\n * `canUser()` resolver.\n *\n * https://developer.wordpress.org/rest-api/reference/\n *\n * @param  state    Data state.\n * @param  kind     Entity kind.\n * @param  name     Entity name.\n * @param  recordId Record's id.\n * @return Whether or not the user can edit,\n * or `undefined` if the OPTIONS request is still being made.\n */\nexport function canUserEditEntityRecord(\n\tstate: State,\n\tkind: Kind,\n\tname: Name,\n\trecordId: GenericRecordKey\n): boolean | undefined {\n\tconst entityConfig = getEntityConfig( state, kind, name );\n\tif ( ! entityConfig ) {\n\t\treturn false;\n\t}\n\tconst resource = entityConfig.__unstable_rest_base;\n\n\treturn canUser( state, 'update', resource, recordId );\n}\n\n/**\n * Returns the latest autosaves for the post.\n *\n * May return multiple autosaves since the backend stores one autosave per\n * author for each post.\n *\n * @param  state    State tree.\n * @param  postType The type of the parent post.\n * @param  postId   The id of the parent post.\n *\n * @return An array of autosaves for the post, or undefined if there is none.\n */\nexport function getAutosaves(\n\tstate: State,\n\tpostType: string,\n\tpostId: GenericRecordKey\n): Array< any > | undefined {\n\treturn state.autosaves[ postId ];\n}\n\n/**\n * Returns the autosave for the post and author.\n *\n * @param  state    State tree.\n * @param  postType The type of the parent post.\n * @param  postId   The id of the parent post.\n * @param  authorId The id of the author.\n *\n * @return The autosave for the post and author.\n */\nexport function getAutosave(\n\tstate: State,\n\tpostType: string,\n\tpostId: GenericRecordKey,\n\tauthorId: GenericRecordKey\n): EntityRecord | undefined {\n\tif ( authorId === undefined ) {\n\t\treturn;\n\t}\n\n\tconst autosaves = state.autosaves[ postId ];\n\treturn find( autosaves, { author: authorId } );\n}\n\n/**\n * Returns true if the REST request for autosaves has completed.\n *\n * @param  state    State tree.\n * @param  postType The type of the parent post.\n * @param  postId   The id of the parent post.\n *\n * @return True if the REST request was completed. False otherwise.\n */\nexport const hasFetchedAutosaves = createRegistrySelector(\n\t( select ) =>\n\t\t(\n\t\t\tstate: State,\n\t\t\tpostType: string,\n\t\t\tpostId: GenericRecordKey\n\t\t): boolean => {\n\t\t\treturn select( STORE_NAME ).hasFinishedResolution( 'getAutosaves', [\n\t\t\t\tpostType,\n\t\t\t\tpostId,\n\t\t\t] );\n\t\t}\n);\n\n/**\n * Returns a new reference when edited values have changed. This is useful in\n * inferring where an edit has been made between states by comparison of the\n * return values using strict equality.\n *\n * @example\n *\n * ```\n * const hasEditOccurred = (\n *    getReferenceByDistinctEdits( beforeState ) !==\n *    getReferenceByDistinctEdits( afterState )\n * );\n * ```\n *\n * @param  state Editor state.\n *\n * @return A value whose reference will change only when an edit occurs.\n */\nexport const getReferenceByDistinctEdits = createSelector(\n\t// This unused state argument is listed here for the documentation generating tool (docgen).\n\t( state: State ) => [],\n\t( state: State ) => [\n\t\tstate.undo.length,\n\t\tstate.undo.offset,\n\t\tstate.undo.flattenedUndo,\n\t]\n);\n\n/**\n * Retrieve the frontend template used for a given link.\n *\n * @param  state Editor state.\n * @param  link  Link.\n *\n * @return The template record.\n */\nexport function __experimentalGetTemplateForLink(\n\tstate: State,\n\tlink: string\n): WpTemplate< 'edit' > | null {\n\tconst records = getEntityRecords( state, 'postType', 'wp_template', {\n\t\t'find-template': link,\n\t} );\n\n\tconst template = records?.length ? records[ 0 ] : null;\n\tif ( template ) {\n\t\treturn getEditedEntityRecord(\n\t\t\tstate,\n\t\t\t'postType',\n\t\t\t'wp_template',\n\t\t\ttemplate.id\n\t\t);\n\t}\n\treturn template;\n}\n\n/**\n * Retrieve the current theme's base global styles\n *\n * @param  state Editor state.\n *\n * @return The Global Styles object.\n */\nexport function __experimentalGetCurrentThemeBaseGlobalStyles(\n\tstate: State\n): any {\n\tconst currentTheme = getCurrentTheme( state );\n\tif ( ! currentTheme ) {\n\t\treturn null;\n\t}\n\treturn state.themeBaseGlobalStyles[ currentTheme.stylesheet ];\n}\n\n/**\n * Return the ID of the current global styles object.\n *\n * @param  state Data state.\n *\n * @return The current global styles ID.\n */\nexport function __experimentalGetCurrentThemeGlobalStylesVariations(\n\tstate: State\n): string | null {\n\tconst currentTheme = getCurrentTheme( state );\n\tif ( ! currentTheme ) {\n\t\treturn null;\n\t}\n\treturn state.themeGlobalStyleVariations[ currentTheme.stylesheet ];\n}\n\n/**\n * Retrieve the list of registered block patterns.\n *\n * @param  state Data state.\n *\n * @return Block pattern list.\n */\nexport function getBlockPatterns( state: State ): Array< any > {\n\treturn state.blockPatterns;\n}\n\n/**\n * Retrieve the list of registered block pattern categories.\n *\n * @param  state Data state.\n *\n * @return Block pattern category list.\n */\nexport function getBlockPatternCategories( state: State ): Array< any > {\n\treturn state.blockPatternCategories;\n}\n"]}