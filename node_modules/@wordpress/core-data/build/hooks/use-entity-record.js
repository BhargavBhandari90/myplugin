"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.__experimentalUseEntityRecord = __experimentalUseEntityRecord;
exports.default = useEntityRecord;

var _deprecated = _interopRequireDefault(require("@wordpress/deprecated"));

var _useQuerySelect = _interopRequireDefault(require("./use-query-select"));

var _ = require("../");

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */

/**
 * Resolves the specified entity record.
 *
 * @param  kind     Kind of the entity, e.g. `root` or a `postType`. See rootEntitiesConfig in ../entities.ts for a list of available kinds.
 * @param  name     Name of the entity, e.g. `plugin` or a `post`. See rootEntitiesConfig in ../entities.ts for a list of available names.
 * @param  recordId ID of the requested entity record.
 * @param  options  Optional hook options.
 * @example
 * ```js
 * import { useEntityRecord } from '@wordpress/core-data';
 *
 * function PageTitleDisplay( { id } ) {
 *   const { record, isResolving } = useEntityRecord( 'postType', 'page', id );
 *
 *   if ( isResolving ) {
 *     return 'Loading...';
 *   }
 *
 *   return record.title;
 * }
 *
 * // Rendered in the application:
 * // <PageTitleDisplay id={ 1 } />
 * ```
 *
 * In the above example, when `PageTitleDisplay` is rendered into an
 * application, the page and the resolution details will be retrieved from
 * the store state using `getEntityRecord()`, or resolved if missing.
 *
 * @return Entity record data.
 * @template RecordType
 */
function useEntityRecord(kind, name, recordId) {
  let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {
    enabled: true
  };
  const {
    data: record,
    ...rest
  } = (0, _useQuerySelect.default)(query => {
    if (!options.enabled) {
      return null;
    }

    return query(_.store).getEntityRecord(kind, name, recordId);
  }, [kind, name, recordId, options.enabled]);
  return {
    record,
    ...rest
  };
}

function __experimentalUseEntityRecord(kind, name, recordId, options) {
  (0, _deprecated.default)(`wp.data.__experimentalUseEntityRecord`, {
    alternative: 'wp.data.useEntityRecord',
    since: '6.1'
  });
  return useEntityRecord(kind, name, recordId, options);
}
//# sourceMappingURL=use-entity-record.js.map