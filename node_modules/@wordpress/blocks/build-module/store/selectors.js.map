{"version":3,"sources":["@wordpress/blocks/src/store/selectors.js"],"names":["createSelector","deburr","filter","findLast","first","flow","get","includes","map","some","getNormalizedBlockType","state","nameOrType","getBlockType","__experimentalGetUnprocessedBlockTypes","unprocessedBlockTypes","getBlockTypes","Object","values","blockTypes","name","getBlockStyles","blockStyles","getBlockVariations","blockName","scope","variations","blockVariations","variation","getActiveBlockVariation","attributes","match","find","Array","isArray","isActive","blockType","attributeKeys","keys","definedAttributes","attribute","length","every","getDefaultBlockVariation","getCategories","categories","getCollections","collections","getDefaultBlockName","defaultBlockName","getFreeformFallbackBlockName","freeformFallbackBlockName","getUnregisteredFallbackBlockName","unregisteredFallbackBlockName","getGroupingBlockName","groupingBlockName","getChildBlockNames","parent","getBlockSupport","feature","defaultSupports","supports","hasBlockSupport","isMatchingSearchTerm","searchTerm","getNormalizedSearchTerm","term","toLowerCase","trim","normalizedSearchTerm","isSearchMatch","normalizedCandidate","title","keywords","category","description","hasChildBlocks","hasChildBlocksWithInserterSupport","childBlockName"],"mappings":"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","sourcesContent":["/**\n * External dependencies\n */\nimport createSelector from 'rememo';\nimport {\n\tdeburr,\n\tfilter,\n\tfindLast,\n\tfirst,\n\tflow,\n\tget,\n\tincludes,\n\tmap,\n\tsome,\n} from 'lodash';\n\n/** @typedef {import('../api/registration').WPBlockVariation} WPBlockVariation */\n/** @typedef {import('../api/registration').WPBlockVariationScope} WPBlockVariationScope */\n/** @typedef {import('./reducer').WPBlockCategory} WPBlockCategory */\n\n/**\n * Given a block name or block type object, returns the corresponding\n * normalized block type object.\n *\n * @param {Object}          state      Blocks state.\n * @param {(string|Object)} nameOrType Block name or type object\n *\n * @return {Object} Block type object.\n */\nconst getNormalizedBlockType = ( state, nameOrType ) =>\n\t'string' === typeof nameOrType\n\t\t? getBlockType( state, nameOrType )\n\t\t: nameOrType;\n\n/**\n * Returns all the unprocessed block types as passed during the registration.\n *\n * @param {Object} state Data state.\n *\n * @return {Array} Unprocessed block types.\n */\nexport function __experimentalGetUnprocessedBlockTypes( state ) {\n\treturn state.unprocessedBlockTypes;\n}\n\n/**\n * Returns all the available block types.\n *\n * @param {Object} state Data state.\n *\n * @return {Array} Block Types.\n */\nexport const getBlockTypes = createSelector(\n\t( state ) => Object.values( state.blockTypes ),\n\t( state ) => [ state.blockTypes ]\n);\n\n/**\n * Returns a block type by name.\n *\n * @param {Object} state Data state.\n * @param {string} name  Block type name.\n *\n * @return {Object?} Block Type.\n */\nexport function getBlockType( state, name ) {\n\treturn state.blockTypes[ name ];\n}\n\n/**\n * Returns block styles by block name.\n *\n * @param {Object} state Data state.\n * @param {string} name  Block type name.\n *\n * @return {Array?} Block Styles.\n */\nexport function getBlockStyles( state, name ) {\n\treturn state.blockStyles[ name ];\n}\n\n/**\n * Returns block variations by block name.\n *\n * @param {Object}                state     Data state.\n * @param {string}                blockName Block type name.\n * @param {WPBlockVariationScope} [scope]   Block variation scope name.\n *\n * @return {(WPBlockVariation[]|void)} Block variations.\n */\nexport const getBlockVariations = createSelector(\n\t( state, blockName, scope ) => {\n\t\tconst variations = state.blockVariations[ blockName ];\n\t\tif ( ! variations || ! scope ) {\n\t\t\treturn variations;\n\t\t}\n\t\treturn variations.filter( ( variation ) => {\n\t\t\t// For backward compatibility reasons, variation's scope defaults to\n\t\t\t// `block` and `inserter` when not set.\n\t\t\treturn ( variation.scope || [ 'block', 'inserter' ] ).includes(\n\t\t\t\tscope\n\t\t\t);\n\t\t} );\n\t},\n\t( state, blockName ) => [ state.blockVariations[ blockName ] ]\n);\n\n/**\n * Returns the active block variation for a given block based on its attributes.\n * Variations are determined by their `isActive` property.\n * Which is either an array of block attribute keys or a function.\n *\n * In case of an array of block attribute keys, the `attributes` are compared\n * to the variation's attributes using strict equality check.\n *\n * In case of function type, the function should accept a block's attributes\n * and the variation's attributes and determines if a variation is active.\n * A function that accepts a block's attributes and the variation's attributes and determines if a variation is active.\n *\n * @param {Object}                state      Data state.\n * @param {string}                blockName  Name of block (example: “core/columns”).\n * @param {Object}                attributes Block attributes used to determine active variation.\n * @param {WPBlockVariationScope} [scope]    Block variation scope name.\n *\n * @return {(WPBlockVariation|undefined)} Active block variation.\n */\nexport function getActiveBlockVariation( state, blockName, attributes, scope ) {\n\tconst variations = getBlockVariations( state, blockName, scope );\n\n\tconst match = variations?.find( ( variation ) => {\n\t\tif ( Array.isArray( variation.isActive ) ) {\n\t\t\tconst blockType = getBlockType( state, blockName );\n\t\t\tconst attributeKeys = Object.keys( blockType?.attributes || {} );\n\t\t\tconst definedAttributes = variation.isActive.filter(\n\t\t\t\t( attribute ) => attributeKeys.includes( attribute )\n\t\t\t);\n\t\t\tif ( definedAttributes.length === 0 ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\treturn definedAttributes.every(\n\t\t\t\t( attribute ) =>\n\t\t\t\t\tattributes[ attribute ] ===\n\t\t\t\t\tvariation.attributes[ attribute ]\n\t\t\t);\n\t\t}\n\n\t\treturn variation.isActive?.( attributes, variation.attributes );\n\t} );\n\n\treturn match;\n}\n\n/**\n * Returns the default block variation for the given block type.\n * When there are multiple variations annotated as the default one,\n * the last added item is picked. This simplifies registering overrides.\n * When there is no default variation set, it returns the first item.\n *\n * @param {Object}                state     Data state.\n * @param {string}                blockName Block type name.\n * @param {WPBlockVariationScope} [scope]   Block variation scope name.\n *\n * @return {?WPBlockVariation} The default block variation.\n */\nexport function getDefaultBlockVariation( state, blockName, scope ) {\n\tconst variations = getBlockVariations( state, blockName, scope );\n\n\treturn findLast( variations, 'isDefault' ) || first( variations );\n}\n\n/**\n * Returns all the available categories.\n *\n * @param {Object} state Data state.\n *\n * @return {WPBlockCategory[]} Categories list.\n */\nexport function getCategories( state ) {\n\treturn state.categories;\n}\n\n/**\n * Returns all the available collections.\n *\n * @param {Object} state Data state.\n *\n * @return {Object} Collections list.\n */\nexport function getCollections( state ) {\n\treturn state.collections;\n}\n\n/**\n * Returns the name of the default block name.\n *\n * @param {Object} state Data state.\n *\n * @return {string?} Default block name.\n */\nexport function getDefaultBlockName( state ) {\n\treturn state.defaultBlockName;\n}\n\n/**\n * Returns the name of the block for handling non-block content.\n *\n * @param {Object} state Data state.\n *\n * @return {string?} Name of the block for handling non-block content.\n */\nexport function getFreeformFallbackBlockName( state ) {\n\treturn state.freeformFallbackBlockName;\n}\n\n/**\n * Returns the name of the block for handling unregistered blocks.\n *\n * @param {Object} state Data state.\n *\n * @return {string?} Name of the block for handling unregistered blocks.\n */\nexport function getUnregisteredFallbackBlockName( state ) {\n\treturn state.unregisteredFallbackBlockName;\n}\n\n/**\n * Returns the name of the block for handling unregistered blocks.\n *\n * @param {Object} state Data state.\n *\n * @return {string?} Name of the block for handling unregistered blocks.\n */\nexport function getGroupingBlockName( state ) {\n\treturn state.groupingBlockName;\n}\n\n/**\n * Returns an array with the child blocks of a given block.\n *\n * @param {Object} state     Data state.\n * @param {string} blockName Block type name.\n *\n * @return {Array} Array of child block names.\n */\nexport const getChildBlockNames = createSelector(\n\t( state, blockName ) => {\n\t\treturn map(\n\t\t\tfilter( state.blockTypes, ( blockType ) => {\n\t\t\t\treturn includes( blockType.parent, blockName );\n\t\t\t} ),\n\t\t\t( { name } ) => name\n\t\t);\n\t},\n\t( state ) => [ state.blockTypes ]\n);\n\n/**\n * Returns the block support value for a feature, if defined.\n *\n * @param {Object}          state           Data state.\n * @param {(string|Object)} nameOrType      Block name or type object\n * @param {Array|string}    feature         Feature to retrieve\n * @param {*}               defaultSupports Default value to return if not\n *                                          explicitly defined\n *\n * @return {?*} Block support value\n */\nexport const getBlockSupport = (\n\tstate,\n\tnameOrType,\n\tfeature,\n\tdefaultSupports\n) => {\n\tconst blockType = getNormalizedBlockType( state, nameOrType );\n\tif ( ! blockType?.supports ) {\n\t\treturn defaultSupports;\n\t}\n\n\treturn get( blockType.supports, feature, defaultSupports );\n};\n\n/**\n * Returns true if the block defines support for a feature, or false otherwise.\n *\n * @param {Object}          state           Data state.\n * @param {(string|Object)} nameOrType      Block name or type object.\n * @param {string}          feature         Feature to test.\n * @param {boolean}         defaultSupports Whether feature is supported by\n *                                          default if not explicitly defined.\n *\n * @return {boolean} Whether block supports feature.\n */\nexport function hasBlockSupport( state, nameOrType, feature, defaultSupports ) {\n\treturn !! getBlockSupport( state, nameOrType, feature, defaultSupports );\n}\n\n/**\n * Returns true if the block type by the given name or object value matches a\n * search term, or false otherwise.\n *\n * @param {Object}          state      Blocks state.\n * @param {(string|Object)} nameOrType Block name or type object.\n * @param {string}          searchTerm Search term by which to filter.\n *\n * @return {Object[]} Whether block type matches search term.\n */\nexport function isMatchingSearchTerm( state, nameOrType, searchTerm ) {\n\tconst blockType = getNormalizedBlockType( state, nameOrType );\n\n\tconst getNormalizedSearchTerm = flow( [\n\t\t// Disregard diacritics.\n\t\t//  Input: \"média\"\n\t\tdeburr,\n\n\t\t// Lowercase.\n\t\t//  Input: \"MEDIA\"\n\t\t( term ) => term.toLowerCase(),\n\n\t\t// Strip leading and trailing whitespace.\n\t\t//  Input: \" media \"\n\t\t( term ) => term.trim(),\n\t] );\n\n\tconst normalizedSearchTerm = getNormalizedSearchTerm( searchTerm );\n\n\tconst isSearchMatch = flow( [\n\t\tgetNormalizedSearchTerm,\n\t\t( normalizedCandidate ) =>\n\t\t\tincludes( normalizedCandidate, normalizedSearchTerm ),\n\t] );\n\n\treturn (\n\t\tisSearchMatch( blockType.title ) ||\n\t\tsome( blockType.keywords, isSearchMatch ) ||\n\t\tisSearchMatch( blockType.category ) ||\n\t\tisSearchMatch( blockType.description )\n\t);\n}\n\n/**\n * Returns a boolean indicating if a block has child blocks or not.\n *\n * @param {Object} state     Data state.\n * @param {string} blockName Block type name.\n *\n * @return {boolean} True if a block contains child blocks and false otherwise.\n */\nexport const hasChildBlocks = ( state, blockName ) => {\n\treturn getChildBlockNames( state, blockName ).length > 0;\n};\n\n/**\n * Returns a boolean indicating if a block has at least one child block with inserter support.\n *\n * @param {Object} state     Data state.\n * @param {string} blockName Block type name.\n *\n * @return {boolean} True if a block contains at least one child blocks with inserter support\n *                   and false otherwise.\n */\nexport const hasChildBlocksWithInserterSupport = ( state, blockName ) => {\n\treturn some( getChildBlockNames( state, blockName ), ( childBlockName ) => {\n\t\treturn hasBlockSupport( state, childBlockName, 'inserter', true );\n\t} );\n};\n"]}