{"version":3,"sources":["@wordpress/blocks/src/api/validation/logger.js"],"names":["createLogger","createLogHandler","logger","log","message","args","process","env","NODE_ENV","require","format","error","console","warning","warn","getItems","createQueuedLogger","queue","push"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AAEA,OAAO,SAASA,YAAT,GAAwB;AAC9B;AACD;AACA;AACA;AACA;AACA;AACA;AACC,WAASC,gBAAT,CAA2BC,MAA3B,EAAoC;AACnC,QAAIC,GAAG,GAAG,UAAEC,OAAF;AAAA,wCAAcC,IAAd;AAAcA,QAAAA,IAAd;AAAA;;AAAA,aACTH,MAAM,CAAE,uBAAuBE,OAAzB,EAAkC,GAAGC,IAArC,CADG;AAAA,KAAV,CADmC,CAInC;AACA;AACA;AACA;;;AACA,QAAKC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,MAA9B,EAAuC;AACtCL,MAAAA,GAAG,GAAG;AAAA,eAAeD,MAAM,CAAEO,OAAO,CAAE,MAAF,CAAP,CAAkBC,MAAlB,CAA0B,YAA1B,CAAF,CAArB;AAAA,OAAN;AACA;;AAED,WAAOP,GAAP;AACA;;AAED,SAAO;AACN;AACAQ,IAAAA,KAAK,EAAEV,gBAAgB,CAAEW,OAAO,CAACD,KAAV,CAFjB;AAGN;AACAE,IAAAA,OAAO,EAAEZ,gBAAgB,CAAEW,OAAO,CAACE,IAAV,CAJnB;;AAKNC,IAAAA,QAAQ,GAAG;AACV,aAAO,EAAP;AACA;;AAPK,GAAP;AASA;AAED,OAAO,SAASC,kBAAT,GAA8B;AACpC;AACD;AACA;AACA;AACA;AACC,QAAMC,KAAK,GAAG,EAAd;AAEA,QAAMf,MAAM,GAAGF,YAAY,EAA3B;AAEA,SAAO;AACNW,IAAAA,KAAK,GAAY;AAAA,yCAAPN,IAAO;AAAPA,QAAAA,IAAO;AAAA;;AAChBY,MAAAA,KAAK,CAACC,IAAN,CAAY;AAAEf,QAAAA,GAAG,EAAED,MAAM,CAACS,KAAd;AAAqBN,QAAAA;AAArB,OAAZ;AACA,KAHK;;AAINQ,IAAAA,OAAO,GAAY;AAAA,yCAAPR,IAAO;AAAPA,QAAAA,IAAO;AAAA;;AAClBY,MAAAA,KAAK,CAACC,IAAN,CAAY;AAAEf,QAAAA,GAAG,EAAED,MAAM,CAACW,OAAd;AAAuBR,QAAAA;AAAvB,OAAZ;AACA,KANK;;AAONU,IAAAA,QAAQ,GAAG;AACV,aAAOE,KAAP;AACA;;AATK,GAAP;AAWA","sourcesContent":["/**\n * @typedef LoggerItem\n * @property {Function}   log  Which logger recorded the message\n * @property {Array<any>} args White arguments were supplied to the logger\n */\n\nexport function createLogger() {\n\t/**\n\t * Creates a log handler with block validation prefix.\n\t *\n\t * @param {Function} logger Original logger function.\n\t *\n\t * @return {Function} Augmented logger function.\n\t */\n\tfunction createLogHandler( logger ) {\n\t\tlet log = ( message, ...args ) =>\n\t\t\tlogger( 'Block validation: ' + message, ...args );\n\n\t\t// In test environments, pre-process string substitutions to improve\n\t\t// readability of error messages. We'd prefer to avoid pulling in this\n\t\t// dependency in runtime environments, and it can be dropped by a combo\n\t\t// of Webpack env substitution + UglifyJS dead code elimination.\n\t\tif ( process.env.NODE_ENV === 'test' ) {\n\t\t\tlog = ( ...args ) => logger( require( 'util' ).format( ...args ) );\n\t\t}\n\n\t\treturn log;\n\t}\n\n\treturn {\n\t\t// eslint-disable-next-line no-console\n\t\terror: createLogHandler( console.error ),\n\t\t// eslint-disable-next-line no-console\n\t\twarning: createLogHandler( console.warn ),\n\t\tgetItems() {\n\t\t\treturn [];\n\t\t},\n\t};\n}\n\nexport function createQueuedLogger() {\n\t/**\n\t * The list of enqueued log actions to print.\n\t *\n\t * @type {Array<LoggerItem>}\n\t */\n\tconst queue = [];\n\n\tconst logger = createLogger();\n\n\treturn {\n\t\terror( ...args ) {\n\t\t\tqueue.push( { log: logger.error, args } );\n\t\t},\n\t\twarning( ...args ) {\n\t\t\tqueue.push( { log: logger.warning, args } );\n\t\t},\n\t\tgetItems() {\n\t\t\treturn queue;\n\t\t},\n\t};\n}\n"]}