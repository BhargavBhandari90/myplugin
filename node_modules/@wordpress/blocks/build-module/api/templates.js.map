{"version":3,"sources":["@wordpress/blocks/src/api/templates.js"],"names":["every","map","get","mapValues","renderToString","convertLegacyBlockNameAndAttributes","createBlock","getBlockType","doBlocksMatchTemplate","blocks","template","length","index","name","innerBlocksTemplate","block","innerBlocks","synchronizeBlocksWithTemplate","attributes","blockType","isHTMLAttribute","attributeDefinition","isQueryAttribute","normalizeAttributes","schema","values","value","key","normalizeAttribute","definition","Array","isArray","subValues","query","normalizedAttributes","blockName","blockAttributes","undefined","originalName","originalContent","originalUndelimitedContent"],"mappings":"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","sourcesContent":["/**\n * External dependencies\n */\nimport { every, map, get, mapValues } from 'lodash';\n\n/**\n * WordPress dependencies\n */\nimport { renderToString } from '@wordpress/element';\n\n/**\n * Internal dependencies\n */\nimport { convertLegacyBlockNameAndAttributes } from './parser/convert-legacy-block';\nimport { createBlock } from './factory';\nimport { getBlockType } from './registration';\n\n/**\n * Checks whether a list of blocks matches a template by comparing the block names.\n *\n * @param {Array} blocks   Block list.\n * @param {Array} template Block template.\n *\n * @return {boolean} Whether the list of blocks matches a templates.\n */\nexport function doBlocksMatchTemplate( blocks = [], template = [] ) {\n\treturn (\n\t\tblocks.length === template.length &&\n\t\tevery( template, ( [ name, , innerBlocksTemplate ], index ) => {\n\t\t\tconst block = blocks[ index ];\n\t\t\treturn (\n\t\t\t\tname === block.name &&\n\t\t\t\tdoBlocksMatchTemplate( block.innerBlocks, innerBlocksTemplate )\n\t\t\t);\n\t\t} )\n\t);\n}\n\n/**\n * Synchronize a block list with a block template.\n *\n * Synchronizing a block list with a block template means that we loop over the blocks\n * keep the block as is if it matches the block at the same position in the template\n * (If it has the same name) and if doesn't match, we create a new block based on the template.\n * Extra blocks not present in the template are removed.\n *\n * @param {Array} blocks   Block list.\n * @param {Array} template Block template.\n *\n * @return {Array} Updated Block list.\n */\nexport function synchronizeBlocksWithTemplate( blocks = [], template ) {\n\t// If no template is provided, return blocks unmodified.\n\tif ( ! template ) {\n\t\treturn blocks;\n\t}\n\n\treturn map(\n\t\ttemplate,\n\t\t( [ name, attributes, innerBlocksTemplate ], index ) => {\n\t\t\tconst block = blocks[ index ];\n\n\t\t\tif ( block && block.name === name ) {\n\t\t\t\tconst innerBlocks = synchronizeBlocksWithTemplate(\n\t\t\t\t\tblock.innerBlocks,\n\t\t\t\t\tinnerBlocksTemplate\n\t\t\t\t);\n\t\t\t\treturn { ...block, innerBlocks };\n\t\t\t}\n\n\t\t\t// To support old templates that were using the \"children\" format\n\t\t\t// for the attributes using \"html\" strings now, we normalize the template attributes\n\t\t\t// before creating the blocks.\n\n\t\t\tconst blockType = getBlockType( name );\n\t\t\tconst isHTMLAttribute = ( attributeDefinition ) =>\n\t\t\t\tget( attributeDefinition, [ 'source' ] ) === 'html';\n\t\t\tconst isQueryAttribute = ( attributeDefinition ) =>\n\t\t\t\tget( attributeDefinition, [ 'source' ] ) === 'query';\n\n\t\t\tconst normalizeAttributes = ( schema, values ) => {\n\t\t\t\treturn mapValues( values, ( value, key ) => {\n\t\t\t\t\treturn normalizeAttribute( schema[ key ], value );\n\t\t\t\t} );\n\t\t\t};\n\t\t\tconst normalizeAttribute = ( definition, value ) => {\n\t\t\t\tif ( isHTMLAttribute( definition ) && Array.isArray( value ) ) {\n\t\t\t\t\t// Introduce a deprecated call at this point\n\t\t\t\t\t// When we're confident that \"children\" format should be removed from the templates.\n\n\t\t\t\t\treturn renderToString( value );\n\t\t\t\t}\n\n\t\t\t\tif ( isQueryAttribute( definition ) && value ) {\n\t\t\t\t\treturn value.map( ( subValues ) => {\n\t\t\t\t\t\treturn normalizeAttributes(\n\t\t\t\t\t\t\tdefinition.query,\n\t\t\t\t\t\t\tsubValues\n\t\t\t\t\t\t);\n\t\t\t\t\t} );\n\t\t\t\t}\n\n\t\t\t\treturn value;\n\t\t\t};\n\n\t\t\tconst normalizedAttributes = normalizeAttributes(\n\t\t\t\tget( blockType, [ 'attributes' ], {} ),\n\t\t\t\tattributes\n\t\t\t);\n\n\t\t\tlet [ blockName, blockAttributes ] =\n\t\t\t\tconvertLegacyBlockNameAndAttributes(\n\t\t\t\t\tname,\n\t\t\t\t\tnormalizedAttributes\n\t\t\t\t);\n\n\t\t\t// If a Block is undefined at this point, use the core/missing block as\n\t\t\t// a placeholder for a better user experience.\n\t\t\tif ( undefined === getBlockType( blockName ) ) {\n\t\t\t\tblockAttributes = {\n\t\t\t\t\toriginalName: name,\n\t\t\t\t\toriginalContent: '',\n\t\t\t\t\toriginalUndelimitedContent: '',\n\t\t\t\t};\n\t\t\t\tblockName = 'core/missing';\n\t\t\t}\n\n\t\t\treturn createBlock(\n\t\t\t\tblockName,\n\t\t\t\tblockAttributes,\n\t\t\t\tsynchronizeBlocksWithTemplate( [], innerBlocksTemplate )\n\t\t\t);\n\t\t}\n\t);\n}\n"]}