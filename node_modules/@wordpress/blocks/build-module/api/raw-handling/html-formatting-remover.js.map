{"version":3,"sources":["@wordpress/blocks/src/api/raw-handling/html-formatting-remover.js"],"names":["getSibling","isFormattingSpace","character","htmlFormattingRemover","node","nodeType","TEXT_NODE","parent","parentNode","ELEMENT_NODE","nodeName","newData","data","replace","previousSibling","textContent","slice","length","nextSibling","removeChild"],"mappings":"AAAA;AACA;AACA;AACA,SAASA,UAAT,QAA2B,SAA3B;;AAEA,SAASC,iBAAT,CAA4BC,SAA5B,EAAwC;AACvC,SACCA,SAAS,KAAK,GAAd,IACAA,SAAS,KAAK,IADd,IAEAA,SAAS,KAAK,IAFd,IAGAA,SAAS,KAAK,IAJf;AAMA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,eAAe,SAASC,qBAAT,CAAgCC,IAAhC,EAAuC;AACrD,MAAKA,IAAI,CAACC,QAAL,KAAkBD,IAAI,CAACE,SAA5B,EAAwC;AACvC;AACA,GAHoD,CAKrD;AACA;AACA;AACA;AACA;;AAEA;;;AACA,MAAIC,MAAM,GAAGH,IAAb;;AACA,SAAUG,MAAM,GAAGA,MAAM,CAACC,UAA1B,EAAyC;AACxC,QACCD,MAAM,CAACF,QAAP,KAAoBE,MAAM,CAACE,YAA3B,IACAF,MAAM,CAACG,QAAP,KAAoB,KAFrB,EAGE;AACD;AACA;AACD,GApBoD,CAsBrD;;;AACA,MAAIC,OAAO,GAAGP,IAAI,CAACQ,IAAL,CAAUC,OAAV,CAAmB,aAAnB,EAAkC,GAAlC,CAAd,CAvBqD,CAyBrD;AACA;AACA;;AACA,MAAKF,OAAO,CAAE,CAAF,CAAP,KAAiB,GAAtB,EAA4B;AAC3B,UAAMG,eAAe,GAAGd,UAAU,CAAEI,IAAF,EAAQ,UAAR,CAAlC;;AAEA,QACC,CAAEU,eAAF,IACAA,eAAe,CAACJ,QAAhB,KAA6B,IAD7B,IAEAI,eAAe,CAACC,WAAhB,CAA4BC,KAA5B,CAAmC,CAAC,CAApC,MAA4C,GAH7C,EAIE;AACDL,MAAAA,OAAO,GAAGA,OAAO,CAACK,KAAR,CAAe,CAAf,CAAV;AACA;AACD,GAtCoD,CAwCrD;AACA;AACA;;;AACA,MAAKL,OAAO,CAAEA,OAAO,CAACM,MAAR,GAAiB,CAAnB,CAAP,KAAkC,GAAvC,EAA6C;AAC5C,UAAMC,WAAW,GAAGlB,UAAU,CAAEI,IAAF,EAAQ,MAAR,CAA9B;;AAEA,QACC,CAAEc,WAAF,IACAA,WAAW,CAACR,QAAZ,KAAyB,IADzB,IAEEQ,WAAW,CAACb,QAAZ,KAAyBa,WAAW,CAACZ,SAArC,IACDL,iBAAiB,CAAEiB,WAAW,CAACH,WAAZ,CAAyB,CAAzB,CAAF,CAJnB,EAKE;AACDJ,MAAAA,OAAO,GAAGA,OAAO,CAACK,KAAR,CAAe,CAAf,EAAkB,CAAC,CAAnB,CAAV;AACA;AACD,GAtDoD,CAwDrD;AACA;;;AACA,MAAK,CAAEL,OAAP,EAAiB;AAChBP,IAAAA,IAAI,CAACI,UAAL,CAAgBW,WAAhB,CAA6Bf,IAA7B;AACA,GAFD,MAEO;AACNA,IAAAA,IAAI,CAACQ,IAAL,GAAYD,OAAZ;AACA;AACD","sourcesContent":["/**\n * Internal dependencies\n */\nimport { getSibling } from './utils';\n\nfunction isFormattingSpace( character ) {\n\treturn (\n\t\tcharacter === ' ' ||\n\t\tcharacter === '\\r' ||\n\t\tcharacter === '\\n' ||\n\t\tcharacter === '\\t'\n\t);\n}\n\n/**\n * Removes spacing that formats HTML.\n *\n * @see https://www.w3.org/TR/css-text-3/#white-space-processing\n *\n * @param {Node} node The node to be processed.\n * @return {void}\n */\nexport default function htmlFormattingRemover( node ) {\n\tif ( node.nodeType !== node.TEXT_NODE ) {\n\t\treturn;\n\t}\n\n\t// Ignore pre content. Note that this does not use Element#closest due to\n\t// a combination of (a) node may not be Element and (b) node.parentElement\n\t// does not have full support in all browsers (Internet Exporer).\n\t//\n\t// See: https://developer.mozilla.org/en-US/docs/Web/API/Node/parentElement#Browser_compatibility\n\n\t/** @type {Node?} */\n\tlet parent = node;\n\twhile ( ( parent = parent.parentNode ) ) {\n\t\tif (\n\t\t\tparent.nodeType === parent.ELEMENT_NODE &&\n\t\t\tparent.nodeName === 'PRE'\n\t\t) {\n\t\t\treturn;\n\t\t}\n\t}\n\n\t// First, replace any sequence of HTML formatting space with a single space.\n\tlet newData = node.data.replace( /[ \\r\\n\\t]+/g, ' ' );\n\n\t// Remove the leading space if the text element is at the start of a block,\n\t// is preceded by a line break element, or has a space in the previous\n\t// node.\n\tif ( newData[ 0 ] === ' ' ) {\n\t\tconst previousSibling = getSibling( node, 'previous' );\n\n\t\tif (\n\t\t\t! previousSibling ||\n\t\t\tpreviousSibling.nodeName === 'BR' ||\n\t\t\tpreviousSibling.textContent.slice( -1 ) === ' '\n\t\t) {\n\t\t\tnewData = newData.slice( 1 );\n\t\t}\n\t}\n\n\t// Remove the trailing space if the text element is at the end of a block,\n\t// is succeded by a line break element, or has a space in the next text\n\t// node.\n\tif ( newData[ newData.length - 1 ] === ' ' ) {\n\t\tconst nextSibling = getSibling( node, 'next' );\n\n\t\tif (\n\t\t\t! nextSibling ||\n\t\t\tnextSibling.nodeName === 'BR' ||\n\t\t\t( nextSibling.nodeType === nextSibling.TEXT_NODE &&\n\t\t\t\tisFormattingSpace( nextSibling.textContent[ 0 ] ) )\n\t\t) {\n\t\t\tnewData = newData.slice( 0, -1 );\n\t\t}\n\t}\n\n\t// If there's no data left, remove the node, so `previousSibling` stays\n\t// accurate. Otherwise, update the node data.\n\tif ( ! newData ) {\n\t\tnode.parentNode.removeChild( node );\n\t} else {\n\t\tnode.data = newData;\n\t}\n}\n"]}