{"version":3,"sources":["@wordpress/blocks/src/api/raw-handling/shortcode-converter.js"],"names":["some","castArray","find","mapValues","pickBy","includes","regexp","next","createBlock","getBlockTransforms","findTransform","getBlockType","getBlockAttributes","applyBuiltInValidationFixes","segmentHTMLToShortcodeBlock","HTML","lastIndex","excludedBlockNames","transformsFrom","transformation","transform","indexOf","blockName","type","tag","test","transformTags","transformTag","match","previousIndex","index","content","length","beforeHTML","substr","afterHTML","shortcode","isMatch","attrs","attributes","schema","transformationBlockType","block","originalContent"],"mappings":"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","sourcesContent":["/**\n * External dependencies\n */\nimport { some, castArray, find, mapValues, pickBy, includes } from 'lodash';\n\n/**\n * WordPress dependencies\n */\nimport { regexp, next } from '@wordpress/shortcode';\n\n/**\n * Internal dependencies\n */\nimport { createBlock, getBlockTransforms, findTransform } from '../factory';\nimport { getBlockType } from '../registration';\nimport { getBlockAttributes } from '../parser/get-block-attributes';\nimport { applyBuiltInValidationFixes } from '../parser/apply-built-in-validation-fixes';\n\nfunction segmentHTMLToShortcodeBlock(\n\tHTML,\n\tlastIndex = 0,\n\texcludedBlockNames = []\n) {\n\t// Get all matches.\n\tconst transformsFrom = getBlockTransforms( 'from' );\n\n\tconst transformation = findTransform(\n\t\ttransformsFrom,\n\t\t( transform ) =>\n\t\t\texcludedBlockNames.indexOf( transform.blockName ) === -1 &&\n\t\t\ttransform.type === 'shortcode' &&\n\t\t\tsome( castArray( transform.tag ), ( tag ) =>\n\t\t\t\tregexp( tag ).test( HTML )\n\t\t\t)\n\t);\n\n\tif ( ! transformation ) {\n\t\treturn [ HTML ];\n\t}\n\n\tconst transformTags = castArray( transformation.tag );\n\tconst transformTag = find( transformTags, ( tag ) =>\n\t\tregexp( tag ).test( HTML )\n\t);\n\n\tlet match;\n\tconst previousIndex = lastIndex;\n\n\tif ( ( match = next( transformTag, HTML, lastIndex ) ) ) {\n\t\tlastIndex = match.index + match.content.length;\n\t\tconst beforeHTML = HTML.substr( 0, match.index );\n\t\tconst afterHTML = HTML.substr( lastIndex );\n\n\t\t// If the shortcode content does not contain HTML and the shortcode is\n\t\t// not on a new line (or in paragraph from Markdown converter),\n\t\t// consider the shortcode as inline text, and thus skip conversion for\n\t\t// this segment.\n\t\tif (\n\t\t\t! includes( match.shortcode.content || '', '<' ) &&\n\t\t\t! (\n\t\t\t\t/(\\n|<p>)\\s*$/.test( beforeHTML ) &&\n\t\t\t\t/^\\s*(\\n|<\\/p>)/.test( afterHTML )\n\t\t\t)\n\t\t) {\n\t\t\treturn segmentHTMLToShortcodeBlock( HTML, lastIndex );\n\t\t}\n\n\t\t// If a transformation's `isMatch` predicate fails for the inbound\n\t\t// shortcode, try again by excluding the current block type.\n\t\t//\n\t\t// This is the only call to `segmentHTMLToShortcodeBlock` that should\n\t\t// ever carry over `excludedBlockNames`. Other calls in the module\n\t\t// should skip that argument as a way to reset the exclusion state, so\n\t\t// that one `isMatch` fail in an HTML fragment doesn't prevent any\n\t\t// valid matches in subsequent fragments.\n\t\tif (\n\t\t\ttransformation.isMatch &&\n\t\t\t! transformation.isMatch( match.shortcode.attrs )\n\t\t) {\n\t\t\treturn segmentHTMLToShortcodeBlock( HTML, previousIndex, [\n\t\t\t\t...excludedBlockNames,\n\t\t\t\ttransformation.blockName,\n\t\t\t] );\n\t\t}\n\n\t\tconst attributes = mapValues(\n\t\t\tpickBy( transformation.attributes, ( schema ) => schema.shortcode ),\n\t\t\t// Passing all of `match` as second argument is intentionally broad\n\t\t\t// but shouldn't be too relied upon.\n\t\t\t//\n\t\t\t// See: https://github.com/WordPress/gutenberg/pull/3610#discussion_r152546926\n\t\t\t( schema ) => schema.shortcode( match.shortcode.attrs, match )\n\t\t);\n\n\t\tconst transformationBlockType = {\n\t\t\t...getBlockType( transformation.blockName ),\n\t\t\tattributes: transformation.attributes,\n\t\t};\n\n\t\tlet block = createBlock(\n\t\t\ttransformation.blockName,\n\t\t\tgetBlockAttributes(\n\t\t\t\ttransformationBlockType,\n\t\t\t\tmatch.shortcode.content,\n\t\t\t\tattributes\n\t\t\t)\n\t\t);\n\t\tblock.originalContent = match.shortcode.content;\n\t\t// Applying the built-in fixes can enhance the attributes with missing content like \"className\".\n\t\tblock = applyBuiltInValidationFixes( block, transformationBlockType );\n\n\t\treturn [\n\t\t\t...segmentHTMLToShortcodeBlock( beforeHTML ),\n\t\t\tblock,\n\t\t\t...segmentHTMLToShortcodeBlock( afterHTML ),\n\t\t];\n\t}\n\n\treturn [ HTML ];\n}\n\nexport default segmentHTMLToShortcodeBlock;\n"]}