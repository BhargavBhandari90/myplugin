{"version":3,"sources":["@wordpress/blocks/src/api/raw-handling/paste-handler.js"],"names":["flatMap","compact","getPhrasingContentSchema","removeInvalidHTML","htmlToBlocks","hasBlockSupport","getBlockInnerHTML","parse","normaliseBlocks","specialCommentConverter","commentRemover","isInlineContent","phrasingContentReducer","headRemover","msListConverter","listReducer","imageCorrector","blockquoteNormaliser","divNormaliser","figureContentReducer","shortcodeConverter","markdownConverter","iframeRemover","googleDocsUIDRemover","htmlFormattingRemover","brRemover","deepFilterHTML","isPlain","getBlockContentSchema","emptyParagraphRemover","console","window","filterInlineHTML","HTML","preserveWhiteSpace","inline","log","pasteHandler","plainText","mode","tagName","replace","content","indexOf","String","prototype","normalize","test","pieces","hasShortcodes","length","phrasingContentSchema","blockContentSchema","blocks","piece","filters","schema","name","trimmedPlainText"],"mappings":"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","sourcesContent":["/**\n * External dependencies\n */\nimport { flatMap, compact } from 'lodash';\n\n/**\n * WordPress dependencies\n */\nimport { getPhrasingContentSchema, removeInvalidHTML } from '@wordpress/dom';\n\n/**\n * Internal dependencies\n */\nimport { htmlToBlocks } from './html-to-blocks';\nimport { hasBlockSupport } from '../registration';\nimport { getBlockInnerHTML } from '../serializer';\nimport parse from '../parser';\nimport normaliseBlocks from './normalise-blocks';\nimport specialCommentConverter from './special-comment-converter';\nimport commentRemover from './comment-remover';\nimport isInlineContent from './is-inline-content';\nimport phrasingContentReducer from './phrasing-content-reducer';\nimport headRemover from './head-remover';\nimport msListConverter from './ms-list-converter';\nimport listReducer from './list-reducer';\nimport imageCorrector from './image-corrector';\nimport blockquoteNormaliser from './blockquote-normaliser';\nimport divNormaliser from './div-normaliser';\nimport figureContentReducer from './figure-content-reducer';\nimport shortcodeConverter from './shortcode-converter';\nimport markdownConverter from './markdown-converter';\nimport iframeRemover from './iframe-remover';\nimport googleDocsUIDRemover from './google-docs-uid-remover';\nimport htmlFormattingRemover from './html-formatting-remover';\nimport brRemover from './br-remover';\nimport { deepFilterHTML, isPlain, getBlockContentSchema } from './utils';\nimport emptyParagraphRemover from './empty-paragraph-remover';\n\n/**\n * Browser dependencies\n */\nconst { console } = window;\n\n/**\n * Filters HTML to only contain phrasing content.\n *\n * @param {string}  HTML               The HTML to filter.\n * @param {boolean} preserveWhiteSpace Whether or not to preserve consequent white space.\n *\n * @return {string} HTML only containing phrasing content.\n */\nfunction filterInlineHTML( HTML, preserveWhiteSpace ) {\n\tHTML = deepFilterHTML( HTML, [\n\t\tgoogleDocsUIDRemover,\n\t\tphrasingContentReducer,\n\t\tcommentRemover,\n\t] );\n\tHTML = removeInvalidHTML( HTML, getPhrasingContentSchema( 'paste' ), {\n\t\tinline: true,\n\t} );\n\n\tif ( ! preserveWhiteSpace ) {\n\t\tHTML = deepFilterHTML( HTML, [ htmlFormattingRemover, brRemover ] );\n\t}\n\n\t// Allows us to ask for this information when we get a report.\n\tconsole.log( 'Processed inline HTML:\\n\\n', HTML );\n\n\treturn HTML;\n}\n\n/**\n * Converts an HTML string to known blocks. Strips everything else.\n *\n * @param {Object}  options\n * @param {string}  [options.HTML]               The HTML to convert.\n * @param {string}  [options.plainText]          Plain text version.\n * @param {string}  [options.mode]               Handle content as blocks or inline content.\n *                                               * 'AUTO': Decide based on the content passed.\n *                                               * 'INLINE': Always handle as inline content, and return string.\n *                                               * 'BLOCKS': Always handle as blocks, and return array of blocks.\n * @param {Array}   [options.tagName]            The tag into which content will be inserted.\n * @param {boolean} [options.preserveWhiteSpace] Whether or not to preserve consequent white space.\n *\n * @return {Array|string} A list of blocks or a string, depending on `handlerMode`.\n */\nexport function pasteHandler( {\n\tHTML = '',\n\tplainText = '',\n\tmode = 'AUTO',\n\ttagName,\n\tpreserveWhiteSpace,\n} ) {\n\t// First of all, strip any meta tags.\n\tHTML = HTML.replace( /<meta[^>]+>/g, '' );\n\t// Strip Windows markers.\n\tHTML = HTML.replace(\n\t\t/^\\s*<html[^>]*>\\s*<body[^>]*>(?:\\s*<!--\\s*StartFragment\\s*-->)?/i,\n\t\t''\n\t);\n\tHTML = HTML.replace(\n\t\t/(?:<!--\\s*EndFragment\\s*-->\\s*)?<\\/body>\\s*<\\/html>\\s*$/i,\n\t\t''\n\t);\n\n\t// If we detect block delimiters in HTML, parse entirely as blocks.\n\tif ( mode !== 'INLINE' ) {\n\t\t// Check plain text if there is no HTML.\n\t\tconst content = HTML ? HTML : plainText;\n\n\t\tif ( content.indexOf( '<!-- wp:' ) !== -1 ) {\n\t\t\treturn parse( content );\n\t\t}\n\t}\n\n\t// Normalize unicode to use composed characters.\n\t// This is unsupported in IE 11 but it's a nice-to-have feature, not mandatory.\n\t// Not normalizing the content will only affect older browsers and won't\n\t// entirely break the app.\n\t// See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/normalize\n\t// See: https://core.trac.wordpress.org/ticket/30130\n\t// See: https://github.com/WordPress/gutenberg/pull/6983#pullrequestreview-125151075\n\tif ( String.prototype.normalize ) {\n\t\tHTML = HTML.normalize();\n\t}\n\n\t// Parse Markdown (and encoded HTML) if:\n\t// * There is a plain text version.\n\t// * There is no HTML version, or it has no formatting.\n\tif ( plainText && ( ! HTML || isPlain( HTML ) ) ) {\n\t\tHTML = plainText;\n\n\t\t// The markdown converter (Showdown) trims whitespace.\n\t\tif ( ! /^\\s+$/.test( plainText ) ) {\n\t\t\tHTML = markdownConverter( HTML );\n\t\t}\n\n\t\t// Switch to inline mode if:\n\t\t// * The current mode is AUTO.\n\t\t// * The original plain text had no line breaks.\n\t\t// * The original plain text was not an HTML paragraph.\n\t\t// * The converted text is just a paragraph.\n\t\tif (\n\t\t\tmode === 'AUTO' &&\n\t\t\tplainText.indexOf( '\\n' ) === -1 &&\n\t\t\tplainText.indexOf( '<p>' ) !== 0 &&\n\t\t\tHTML.indexOf( '<p>' ) === 0\n\t\t) {\n\t\t\tmode = 'INLINE';\n\t\t}\n\t}\n\n\tif ( mode === 'INLINE' ) {\n\t\treturn filterInlineHTML( HTML, preserveWhiteSpace );\n\t}\n\n\t// An array of HTML strings and block objects. The blocks replace matched\n\t// shortcodes.\n\tconst pieces = shortcodeConverter( HTML );\n\n\t// The call to shortcodeConverter will always return more than one element\n\t// if shortcodes are matched. The reason is when shortcodes are matched\n\t// empty HTML strings are included.\n\tconst hasShortcodes = pieces.length > 1;\n\n\tif (\n\t\tmode === 'AUTO' &&\n\t\t! hasShortcodes &&\n\t\tisInlineContent( HTML, tagName )\n\t) {\n\t\treturn filterInlineHTML( HTML, preserveWhiteSpace );\n\t}\n\n\tconst phrasingContentSchema = getPhrasingContentSchema( 'paste' );\n\tconst blockContentSchema = getBlockContentSchema( 'paste' );\n\n\tconst blocks = compact(\n\t\tflatMap( pieces, ( piece ) => {\n\t\t\t// Already a block from shortcode.\n\t\t\tif ( typeof piece !== 'string' ) {\n\t\t\t\treturn piece;\n\t\t\t}\n\n\t\t\tconst filters = [\n\t\t\t\tgoogleDocsUIDRemover,\n\t\t\t\tmsListConverter,\n\t\t\t\theadRemover,\n\t\t\t\tlistReducer,\n\t\t\t\timageCorrector,\n\t\t\t\tphrasingContentReducer,\n\t\t\t\tspecialCommentConverter,\n\t\t\t\tcommentRemover,\n\t\t\t\tiframeRemover,\n\t\t\t\tfigureContentReducer,\n\t\t\t\tblockquoteNormaliser,\n\t\t\t\tdivNormaliser,\n\t\t\t];\n\n\t\t\tconst schema = {\n\t\t\t\t...blockContentSchema,\n\t\t\t\t// Keep top-level phrasing content, normalised by `normaliseBlocks`.\n\t\t\t\t...phrasingContentSchema,\n\t\t\t};\n\n\t\t\tpiece = deepFilterHTML( piece, filters, blockContentSchema );\n\t\t\tpiece = removeInvalidHTML( piece, schema );\n\t\t\tpiece = normaliseBlocks( piece );\n\t\t\tpiece = deepFilterHTML(\n\t\t\t\tpiece,\n\t\t\t\t[ htmlFormattingRemover, brRemover, emptyParagraphRemover ],\n\t\t\t\tblockContentSchema\n\t\t\t);\n\n\t\t\t// Allows us to ask for this information when we get a report.\n\t\t\tconsole.log( 'Processed HTML piece:\\n\\n', piece );\n\n\t\t\treturn htmlToBlocks( piece );\n\t\t} )\n\t);\n\n\t// If we're allowed to return inline content, and there is only one\n\t// inlineable block, and the original plain text content does not have any\n\t// line breaks, then treat it as inline paste.\n\tif (\n\t\tmode === 'AUTO' &&\n\t\tblocks.length === 1 &&\n\t\thasBlockSupport( blocks[ 0 ].name, '__unstablePasteTextInline', false )\n\t) {\n\t\t// Don't catch line breaks at the start or end.\n\t\tconst trimmedPlainText = plainText.replace( /^[\\n]+|[\\n]+$/g, '' );\n\n\t\tif (\n\t\t\ttrimmedPlainText !== '' &&\n\t\t\ttrimmedPlainText.indexOf( '\\n' ) === -1\n\t\t) {\n\t\t\treturn removeInvalidHTML(\n\t\t\t\tgetBlockInnerHTML( blocks[ 0 ] ),\n\t\t\t\tphrasingContentSchema\n\t\t\t);\n\t\t}\n\t}\n\n\treturn blocks;\n}\n"]}