{"version":3,"sources":["@wordpress/blocks/src/api/raw-handling/index.js"],"names":["flatMap","compact","deprecated","getPhrasingContentSchema","htmlToBlocks","parse","normaliseBlocks","specialCommentConverter","listReducer","blockquoteNormaliser","figureContentReducer","shortcodeConverter","deepFilterHTML","getBlockContentSchema","pasteHandler","deprecatedGetPhrasingContentSchema","context","since","alternative","rawHandler","HTML","indexOf","pieces","blockContentSchema","piece","filters"],"mappings":"AAAA;AACA;AACA;AACA,SAASA,OAAT,EAAkBC,OAAlB,QAAiC,QAAjC;AAEA;AACA;AACA;;AACA,OAAOC,UAAP,MAAuB,uBAAvB;AACA,SAASC,wBAAT,QAAyC,gBAAzC;AAEA;AACA;AACA;;AACA,SAASC,YAAT,QAA6B,kBAA7B;AACA,OAAOC,KAAP,MAAkB,WAAlB;AACA,OAAOC,eAAP,MAA4B,oBAA5B;AACA,OAAOC,uBAAP,MAAoC,6BAApC;AACA,OAAOC,WAAP,MAAwB,gBAAxB;AACA,OAAOC,oBAAP,MAAiC,yBAAjC;AACA,OAAOC,oBAAP,MAAiC,0BAAjC;AACA,OAAOC,kBAAP,MAA+B,uBAA/B;AACA,SAASC,cAAT,EAAyBC,qBAAzB,QAAsD,SAAtD;AAEA,SAASC,YAAT,QAA6B,iBAA7B;AAEA,OAAO,SAASC,kCAAT,CAA6CC,OAA7C,EAAuD;AAC7Dd,EAAAA,UAAU,CAAE,oCAAF,EAAwC;AACjDe,IAAAA,KAAK,EAAE,KAD0C;AAEjDC,IAAAA,WAAW,EAAE;AAFoC,GAAxC,CAAV;AAIA,SAAOf,wBAAwB,CAAEa,OAAF,CAA/B;AACA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASG,UAAT,OAAqC;AAAA,MAAhB;AAAEC,IAAAA,IAAI,GAAG;AAAT,GAAgB;;AAC3C;AACA,MAAKA,IAAI,CAACC,OAAL,CAAc,UAAd,MAA+B,CAAC,CAArC,EAAyC;AACxC,WAAOhB,KAAK,CAAEe,IAAF,CAAZ;AACA,GAJ0C,CAM3C;AACA;;;AACA,QAAME,MAAM,GAAGX,kBAAkB,CAAES,IAAF,CAAjC;AACA,QAAMG,kBAAkB,GAAGV,qBAAqB,EAAhD;AAEA,SAAOZ,OAAO,CACbD,OAAO,CAAEsB,MAAF,EAAYE,KAAF,IAAa;AAC7B;AACA,QAAK,OAAOA,KAAP,KAAiB,QAAtB,EAAiC;AAChC,aAAOA,KAAP;AACA,KAJ4B,CAM7B;AACA;AACA;;;AACA,UAAMC,OAAO,GAAG,CACf;AACAjB,IAAAA,WAFe,EAGf;AACAD,IAAAA,uBAJe,EAKf;AACAG,IAAAA,oBANe,EAOf;AACA;AACAD,IAAAA,oBATe,CAAhB;AAYAe,IAAAA,KAAK,GAAGZ,cAAc,CAAEY,KAAF,EAASC,OAAT,EAAkBF,kBAAlB,CAAtB;AACAC,IAAAA,KAAK,GAAGlB,eAAe,CAAEkB,KAAF,CAAvB;AAEA,WAAOpB,YAAY,CAAEoB,KAAF,CAAnB;AACA,GAzBM,CADM,CAAd;AA4BA","sourcesContent":["/**\n * External dependencies\n */\nimport { flatMap, compact } from 'lodash';\n\n/**\n * WordPress dependencies\n */\nimport deprecated from '@wordpress/deprecated';\nimport { getPhrasingContentSchema } from '@wordpress/dom';\n\n/**\n * Internal dependencies\n */\nimport { htmlToBlocks } from './html-to-blocks';\nimport parse from '../parser';\nimport normaliseBlocks from './normalise-blocks';\nimport specialCommentConverter from './special-comment-converter';\nimport listReducer from './list-reducer';\nimport blockquoteNormaliser from './blockquote-normaliser';\nimport figureContentReducer from './figure-content-reducer';\nimport shortcodeConverter from './shortcode-converter';\nimport { deepFilterHTML, getBlockContentSchema } from './utils';\n\nexport { pasteHandler } from './paste-handler';\n\nexport function deprecatedGetPhrasingContentSchema( context ) {\n\tdeprecated( 'wp.blocks.getPhrasingContentSchema', {\n\t\tsince: '5.6',\n\t\talternative: 'wp.dom.getPhrasingContentSchema',\n\t} );\n\treturn getPhrasingContentSchema( context );\n}\n\n/**\n * Converts an HTML string to known blocks.\n *\n * @param {Object} $1\n * @param {string} $1.HTML The HTML to convert.\n *\n * @return {Array} A list of blocks.\n */\nexport function rawHandler( { HTML = '' } ) {\n\t// If we detect block delimiters, parse entirely as blocks.\n\tif ( HTML.indexOf( '<!-- wp:' ) !== -1 ) {\n\t\treturn parse( HTML );\n\t}\n\n\t// An array of HTML strings and block objects. The blocks replace matched\n\t// shortcodes.\n\tconst pieces = shortcodeConverter( HTML );\n\tconst blockContentSchema = getBlockContentSchema();\n\n\treturn compact(\n\t\tflatMap( pieces, ( piece ) => {\n\t\t\t// Already a block from shortcode.\n\t\t\tif ( typeof piece !== 'string' ) {\n\t\t\t\treturn piece;\n\t\t\t}\n\n\t\t\t// These filters are essential for some blocks to be able to transform\n\t\t\t// from raw HTML. These filters move around some content or add\n\t\t\t// additional tags, they do not remove any content.\n\t\t\tconst filters = [\n\t\t\t\t// Needed to adjust invalid lists.\n\t\t\t\tlistReducer,\n\t\t\t\t// Needed to create more and nextpage blocks.\n\t\t\t\tspecialCommentConverter,\n\t\t\t\t// Needed to create media blocks.\n\t\t\t\tfigureContentReducer,\n\t\t\t\t// Needed to create the quote block, which cannot handle text\n\t\t\t\t// without wrapper paragraphs.\n\t\t\t\tblockquoteNormaliser,\n\t\t\t];\n\n\t\t\tpiece = deepFilterHTML( piece, filters, blockContentSchema );\n\t\t\tpiece = normaliseBlocks( piece );\n\n\t\t\treturn htmlToBlocks( piece );\n\t\t} )\n\t);\n}\n"]}