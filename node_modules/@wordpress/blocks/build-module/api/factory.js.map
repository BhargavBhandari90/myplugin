{"version":3,"sources":["@wordpress/blocks/src/api/factory.js"],"names":["v4","uuid","every","castArray","some","filter","first","flatMap","has","uniq","isEmpty","map","createHooks","applyFilters","getBlockType","getBlockTypes","getGroupingBlockName","normalizeBlockType","__experimentalSanitizeBlockAttributes","createBlock","name","attributes","innerBlocks","sanitizedAttributes","clientId","isValid","createBlocksFromInnerBlocksTemplate","innerBlocksOrTemplate","innerBlock","innerBlockTemplate","Array","isArray","__experimentalCloneSanitizedBlock","block","mergeAttributes","newInnerBlocks","cloneBlock","isPossibleTransformForSource","transform","direction","blocks","isMultiBlock","length","firstBlockName","isValidForMultiBlocks","isWildcardBlockTransform","isBlockType","type","sourceBlock","hasMatchingName","indexOf","isContainerGroupBlock","blockName","maybeCheckTransformIsMatch","usingMobileTransformations","getBlockTypesForPossibleFromTransforms","allBlockTypes","blockTypesWithPossibleFromTransforms","blockType","fromTransforms","getBlockTransforms","findTransform","getBlockTypesForPossibleToTransforms","transformsTo","possibleTransforms","blockNames","transformation","t","includes","getPossibleBlockTransformations","blockTypesForFromTransforms","blockTypesForToTransforms","transforms","predicate","hooks","i","candidate","addFilter","toString","result","priority","blockTypeOrName","undefined","supportedMobileTransforms","filteredTransforms","transformBlockName","isMatch","switchToBlockType","blocksArray","firstBlock","sourceName","transformationsFrom","transformationsTo","transformationResults","__experimentalConvert","currentBlock","hasSwitchedBlock","ret","index","results","getBlockFromExample","example"],"mappings":"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","sourcesContent":["/**\n * External dependencies\n */\nimport { v4 as uuid } from 'uuid';\nimport {\n\tevery,\n\tcastArray,\n\tsome,\n\tfilter,\n\tfirst,\n\tflatMap,\n\thas,\n\tuniq,\n\tisEmpty,\n\tmap,\n} from 'lodash';\n\n/**\n * WordPress dependencies\n */\nimport { createHooks, applyFilters } from '@wordpress/hooks';\n\n/**\n * Internal dependencies\n */\nimport {\n\tgetBlockType,\n\tgetBlockTypes,\n\tgetGroupingBlockName,\n} from './registration';\nimport {\n\tnormalizeBlockType,\n\t__experimentalSanitizeBlockAttributes,\n} from './utils';\n\n/**\n * Returns a block object given its type and attributes.\n *\n * @param {string} name        Block name.\n * @param {Object} attributes  Block attributes.\n * @param {?Array} innerBlocks Nested blocks.\n *\n * @return {Object} Block object.\n */\nexport function createBlock( name, attributes = {}, innerBlocks = [] ) {\n\tconst sanitizedAttributes = __experimentalSanitizeBlockAttributes(\n\t\tname,\n\t\tattributes\n\t);\n\n\tconst clientId = uuid();\n\n\t// Blocks are stored with a unique ID, the assigned type name, the block\n\t// attributes, and their inner blocks.\n\treturn {\n\t\tclientId,\n\t\tname,\n\t\tisValid: true,\n\t\tattributes: sanitizedAttributes,\n\t\tinnerBlocks,\n\t};\n}\n\n/**\n * Given an array of InnerBlocks templates or Block Objects,\n * returns an array of created Blocks from them.\n * It handles the case of having InnerBlocks as Blocks by\n * converting them to the proper format to continue recursively.\n *\n * @param {Array} innerBlocksOrTemplate Nested blocks or InnerBlocks templates.\n *\n * @return {Object[]} Array of Block objects.\n */\nexport function createBlocksFromInnerBlocksTemplate(\n\tinnerBlocksOrTemplate = []\n) {\n\treturn innerBlocksOrTemplate.map( ( innerBlock ) => {\n\t\tconst innerBlockTemplate = Array.isArray( innerBlock )\n\t\t\t? innerBlock\n\t\t\t: [\n\t\t\t\t\tinnerBlock.name,\n\t\t\t\t\tinnerBlock.attributes,\n\t\t\t\t\tinnerBlock.innerBlocks,\n\t\t\t  ];\n\t\tconst [ name, attributes, innerBlocks = [] ] = innerBlockTemplate;\n\t\treturn createBlock(\n\t\t\tname,\n\t\t\tattributes,\n\t\t\tcreateBlocksFromInnerBlocksTemplate( innerBlocks )\n\t\t);\n\t} );\n}\n\n/**\n * Given a block object, returns a copy of the block object while sanitizing its attributes,\n * optionally merging new attributes and/or replacing its inner blocks.\n *\n * @param {Object} block           Block instance.\n * @param {Object} mergeAttributes Block attributes.\n * @param {?Array} newInnerBlocks  Nested blocks.\n *\n * @return {Object} A cloned block.\n */\nexport function __experimentalCloneSanitizedBlock(\n\tblock,\n\tmergeAttributes = {},\n\tnewInnerBlocks\n) {\n\tconst clientId = uuid();\n\n\tconst sanitizedAttributes = __experimentalSanitizeBlockAttributes(\n\t\tblock.name,\n\t\t{\n\t\t\t...block.attributes,\n\t\t\t...mergeAttributes,\n\t\t}\n\t);\n\n\treturn {\n\t\t...block,\n\t\tclientId,\n\t\tattributes: sanitizedAttributes,\n\t\tinnerBlocks:\n\t\t\tnewInnerBlocks ||\n\t\t\tblock.innerBlocks.map( ( innerBlock ) =>\n\t\t\t\t__experimentalCloneSanitizedBlock( innerBlock )\n\t\t\t),\n\t};\n}\n\n/**\n * Given a block object, returns a copy of the block object,\n * optionally merging new attributes and/or replacing its inner blocks.\n *\n * @param {Object} block           Block instance.\n * @param {Object} mergeAttributes Block attributes.\n * @param {?Array} newInnerBlocks  Nested blocks.\n *\n * @return {Object} A cloned block.\n */\nexport function cloneBlock( block, mergeAttributes = {}, newInnerBlocks ) {\n\tconst clientId = uuid();\n\n\treturn {\n\t\t...block,\n\t\tclientId,\n\t\tattributes: {\n\t\t\t...block.attributes,\n\t\t\t...mergeAttributes,\n\t\t},\n\t\tinnerBlocks:\n\t\t\tnewInnerBlocks ||\n\t\t\tblock.innerBlocks.map( ( innerBlock ) => cloneBlock( innerBlock ) ),\n\t};\n}\n\n/**\n * Returns a boolean indicating whether a transform is possible based on\n * various bits of context.\n *\n * @param {Object} transform The transform object to validate.\n * @param {string} direction Is this a 'from' or 'to' transform.\n * @param {Array}  blocks    The blocks to transform from.\n *\n * @return {boolean} Is the transform possible?\n */\nconst isPossibleTransformForSource = ( transform, direction, blocks ) => {\n\tif ( isEmpty( blocks ) ) {\n\t\treturn false;\n\t}\n\n\t// If multiple blocks are selected, only multi block transforms\n\t// or wildcard transforms are allowed.\n\tconst isMultiBlock = blocks.length > 1;\n\tconst firstBlockName = first( blocks ).name;\n\tconst isValidForMultiBlocks =\n\t\tisWildcardBlockTransform( transform ) ||\n\t\t! isMultiBlock ||\n\t\ttransform.isMultiBlock;\n\tif ( ! isValidForMultiBlocks ) {\n\t\treturn false;\n\t}\n\n\t// Check non-wildcard transforms to ensure that transform is valid\n\t// for a block selection of multiple blocks of different types.\n\tif (\n\t\t! isWildcardBlockTransform( transform ) &&\n\t\t! every( blocks, { name: firstBlockName } )\n\t) {\n\t\treturn false;\n\t}\n\n\t// Only consider 'block' type transforms as valid.\n\tconst isBlockType = transform.type === 'block';\n\tif ( ! isBlockType ) {\n\t\treturn false;\n\t}\n\n\t// Check if the transform's block name matches the source block (or is a wildcard)\n\t// only if this is a transform 'from'.\n\tconst sourceBlock = first( blocks );\n\tconst hasMatchingName =\n\t\tdirection !== 'from' ||\n\t\ttransform.blocks.indexOf( sourceBlock.name ) !== -1 ||\n\t\tisWildcardBlockTransform( transform );\n\tif ( ! hasMatchingName ) {\n\t\treturn false;\n\t}\n\n\t// Don't allow single Grouping blocks to be transformed into\n\t// a Grouping block.\n\tif (\n\t\t! isMultiBlock &&\n\t\tisContainerGroupBlock( sourceBlock.name ) &&\n\t\tisContainerGroupBlock( transform.blockName )\n\t) {\n\t\treturn false;\n\t}\n\n\t// If the transform has a `isMatch` function specified, check that it returns true.\n\tif ( ! maybeCheckTransformIsMatch( transform, blocks ) ) {\n\t\treturn false;\n\t}\n\n\tif (\n\t\ttransform.usingMobileTransformations &&\n\t\tisWildcardBlockTransform( transform ) &&\n\t\t! isContainerGroupBlock( sourceBlock.name )\n\t) {\n\t\treturn false;\n\t}\n\n\treturn true;\n};\n\n/**\n * Returns block types that the 'blocks' can be transformed into, based on\n * 'from' transforms on other blocks.\n *\n * @param {Array} blocks The blocks to transform from.\n *\n * @return {Array} Block types that the blocks can be transformed into.\n */\nconst getBlockTypesForPossibleFromTransforms = ( blocks ) => {\n\tif ( isEmpty( blocks ) ) {\n\t\treturn [];\n\t}\n\n\tconst allBlockTypes = getBlockTypes();\n\n\t// filter all blocks to find those with a 'from' transform.\n\tconst blockTypesWithPossibleFromTransforms = filter(\n\t\tallBlockTypes,\n\t\t( blockType ) => {\n\t\t\tconst fromTransforms = getBlockTransforms( 'from', blockType.name );\n\t\t\treturn !! findTransform( fromTransforms, ( transform ) => {\n\t\t\t\treturn isPossibleTransformForSource(\n\t\t\t\t\ttransform,\n\t\t\t\t\t'from',\n\t\t\t\t\tblocks\n\t\t\t\t);\n\t\t\t} );\n\t\t}\n\t);\n\n\treturn blockTypesWithPossibleFromTransforms;\n};\n\n/**\n * Returns block types that the 'blocks' can be transformed into, based on\n * the source block's own 'to' transforms.\n *\n * @param {Array} blocks The blocks to transform from.\n *\n * @return {Array} Block types that the source can be transformed into.\n */\nconst getBlockTypesForPossibleToTransforms = ( blocks ) => {\n\tif ( isEmpty( blocks ) ) {\n\t\treturn [];\n\t}\n\n\tconst sourceBlock = first( blocks );\n\tconst blockType = getBlockType( sourceBlock.name );\n\tconst transformsTo = blockType\n\t\t? getBlockTransforms( 'to', blockType.name )\n\t\t: [];\n\n\t// filter all 'to' transforms to find those that are possible.\n\tconst possibleTransforms = filter( transformsTo, ( transform ) => {\n\t\treturn (\n\t\t\ttransform && isPossibleTransformForSource( transform, 'to', blocks )\n\t\t);\n\t} );\n\n\t// Build a list of block names using the possible 'to' transforms.\n\tconst blockNames = flatMap(\n\t\tpossibleTransforms,\n\t\t( transformation ) => transformation.blocks\n\t);\n\n\t// Map block names to block types.\n\treturn blockNames.map( ( name ) =>\n\t\tname === '*' ? name : getBlockType( name )\n\t);\n};\n\n/**\n * Determines whether transform is a \"block\" type\n * and if so whether it is a \"wildcard\" transform\n * ie: targets \"any\" block type\n *\n * @param {Object} t the Block transform object\n *\n * @return {boolean} whether transform is a wildcard transform\n */\nexport const isWildcardBlockTransform = ( t ) =>\n\tt &&\n\tt.type === 'block' &&\n\tArray.isArray( t.blocks ) &&\n\tt.blocks.includes( '*' );\n\n/**\n * Determines whether the given Block is the core Block which\n * acts as a container Block for other Blocks as part of the\n * Grouping mechanics\n *\n * @param {string} name the name of the Block to test against\n *\n * @return {boolean} whether or not the Block is the container Block type\n */\nexport const isContainerGroupBlock = ( name ) =>\n\tname === getGroupingBlockName();\n\n/**\n * Returns an array of block types that the set of blocks received as argument\n * can be transformed into.\n *\n * @param {Array} blocks Blocks array.\n *\n * @return {Array} Block types that the blocks argument can be transformed to.\n */\nexport function getPossibleBlockTransformations( blocks ) {\n\tif ( isEmpty( blocks ) ) {\n\t\treturn [];\n\t}\n\n\tconst blockTypesForFromTransforms =\n\t\tgetBlockTypesForPossibleFromTransforms( blocks );\n\tconst blockTypesForToTransforms =\n\t\tgetBlockTypesForPossibleToTransforms( blocks );\n\n\treturn uniq( [\n\t\t...blockTypesForFromTransforms,\n\t\t...blockTypesForToTransforms,\n\t] );\n}\n\n/**\n * Given an array of transforms, returns the highest-priority transform where\n * the predicate function returns a truthy value. A higher-priority transform\n * is one with a lower priority value (i.e. first in priority order). Returns\n * null if the transforms set is empty or the predicate function returns a\n * falsey value for all entries.\n *\n * @param {Object[]} transforms Transforms to search.\n * @param {Function} predicate  Function returning true on matching transform.\n *\n * @return {?Object} Highest-priority transform candidate.\n */\nexport function findTransform( transforms, predicate ) {\n\t// The hooks library already has built-in mechanisms for managing priority\n\t// queue, so leverage via locally-defined instance.\n\tconst hooks = createHooks();\n\n\tfor ( let i = 0; i < transforms.length; i++ ) {\n\t\tconst candidate = transforms[ i ];\n\t\tif ( predicate( candidate ) ) {\n\t\t\thooks.addFilter(\n\t\t\t\t'transform',\n\t\t\t\t'transform/' + i.toString(),\n\t\t\t\t( result ) => ( result ? result : candidate ),\n\t\t\t\tcandidate.priority\n\t\t\t);\n\t\t}\n\t}\n\n\t// Filter name is arbitrarily chosen but consistent with above aggregation.\n\treturn hooks.applyFilters( 'transform', null );\n}\n\n/**\n * Returns normal block transforms for a given transform direction, optionally\n * for a specific block by name, or an empty array if there are no transforms.\n * If no block name is provided, returns transforms for all blocks. A normal\n * transform object includes `blockName` as a property.\n *\n * @param {string}        direction       Transform direction (\"to\", \"from\").\n * @param {string|Object} blockTypeOrName Block type or name.\n *\n * @return {Array} Block transforms for direction.\n */\nexport function getBlockTransforms( direction, blockTypeOrName ) {\n\t// When retrieving transforms for all block types, recurse into self.\n\tif ( blockTypeOrName === undefined ) {\n\t\treturn flatMap( getBlockTypes(), ( { name } ) =>\n\t\t\tgetBlockTransforms( direction, name )\n\t\t);\n\t}\n\n\t// Validate that block type exists and has array of direction.\n\tconst blockType = normalizeBlockType( blockTypeOrName );\n\tconst { name: blockName, transforms } = blockType || {};\n\tif ( ! transforms || ! Array.isArray( transforms[ direction ] ) ) {\n\t\treturn [];\n\t}\n\n\tconst usingMobileTransformations =\n\t\ttransforms.supportedMobileTransforms &&\n\t\tArray.isArray( transforms.supportedMobileTransforms );\n\tconst filteredTransforms = usingMobileTransformations\n\t\t? filter( transforms[ direction ], ( t ) => {\n\t\t\t\tif ( t.type === 'raw' ) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t\tif ( ! t.blocks || ! t.blocks.length ) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\tif ( isWildcardBlockTransform( t ) ) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t\treturn every( t.blocks, ( transformBlockName ) =>\n\t\t\t\t\ttransforms.supportedMobileTransforms.includes(\n\t\t\t\t\t\ttransformBlockName\n\t\t\t\t\t)\n\t\t\t\t);\n\t\t  } )\n\t\t: transforms[ direction ];\n\n\t// Map transforms to normal form.\n\treturn filteredTransforms.map( ( transform ) => ( {\n\t\t...transform,\n\t\tblockName,\n\t\tusingMobileTransformations,\n\t} ) );\n}\n\n/**\n * Checks that a given transforms isMatch method passes for given source blocks.\n *\n * @param {Object} transform A transform object.\n * @param {Array}  blocks    Blocks array.\n *\n * @return {boolean} True if given blocks are a match for the transform.\n */\nfunction maybeCheckTransformIsMatch( transform, blocks ) {\n\tif ( typeof transform.isMatch !== 'function' ) {\n\t\treturn true;\n\t}\n\tconst sourceBlock = first( blocks );\n\tconst attributes = transform.isMultiBlock\n\t\t? blocks.map( ( block ) => block.attributes )\n\t\t: sourceBlock.attributes;\n\tconst block = transform.isMultiBlock ? blocks : sourceBlock;\n\n\treturn transform.isMatch( attributes, block );\n}\n\n/**\n * Switch one or more blocks into one or more blocks of the new block type.\n *\n * @param {Array|Object} blocks Blocks array or block object.\n * @param {string}       name   Block name.\n *\n * @return {?Array} Array of blocks or null.\n */\nexport function switchToBlockType( blocks, name ) {\n\tconst blocksArray = castArray( blocks );\n\tconst isMultiBlock = blocksArray.length > 1;\n\tconst firstBlock = blocksArray[ 0 ];\n\tconst sourceName = firstBlock.name;\n\n\t// Find the right transformation by giving priority to the \"to\"\n\t// transformation.\n\tconst transformationsFrom = getBlockTransforms( 'from', name );\n\tconst transformationsTo = getBlockTransforms( 'to', sourceName );\n\n\tconst transformation =\n\t\tfindTransform(\n\t\t\ttransformationsTo,\n\t\t\t( t ) =>\n\t\t\t\tt.type === 'block' &&\n\t\t\t\t( isWildcardBlockTransform( t ) ||\n\t\t\t\t\tt.blocks.indexOf( name ) !== -1 ) &&\n\t\t\t\t( ! isMultiBlock || t.isMultiBlock ) &&\n\t\t\t\tmaybeCheckTransformIsMatch( t, blocksArray )\n\t\t) ||\n\t\tfindTransform(\n\t\t\ttransformationsFrom,\n\t\t\t( t ) =>\n\t\t\t\tt.type === 'block' &&\n\t\t\t\t( isWildcardBlockTransform( t ) ||\n\t\t\t\t\tt.blocks.indexOf( sourceName ) !== -1 ) &&\n\t\t\t\t( ! isMultiBlock || t.isMultiBlock ) &&\n\t\t\t\tmaybeCheckTransformIsMatch( t, blocksArray )\n\t\t);\n\n\t// Stop if there is no valid transformation.\n\tif ( ! transformation ) {\n\t\treturn null;\n\t}\n\n\tlet transformationResults;\n\n\tif ( transformation.isMultiBlock ) {\n\t\tif ( has( transformation, '__experimentalConvert' ) ) {\n\t\t\ttransformationResults =\n\t\t\t\ttransformation.__experimentalConvert( blocksArray );\n\t\t} else {\n\t\t\ttransformationResults = transformation.transform(\n\t\t\t\tblocksArray.map( ( currentBlock ) => currentBlock.attributes ),\n\t\t\t\tblocksArray.map( ( currentBlock ) => currentBlock.innerBlocks )\n\t\t\t);\n\t\t}\n\t} else if ( has( transformation, '__experimentalConvert' ) ) {\n\t\ttransformationResults =\n\t\t\ttransformation.__experimentalConvert( firstBlock );\n\t} else {\n\t\ttransformationResults = transformation.transform(\n\t\t\tfirstBlock.attributes,\n\t\t\tfirstBlock.innerBlocks\n\t\t);\n\t}\n\n\t// Ensure that the transformation function returned an object or an array\n\t// of objects.\n\tif (\n\t\ttransformationResults === null ||\n\t\ttypeof transformationResults !== 'object'\n\t) {\n\t\treturn null;\n\t}\n\n\t// If the transformation function returned a single object, we want to work\n\t// with an array instead.\n\ttransformationResults = castArray( transformationResults );\n\n\t// Ensure that every block object returned by the transformation has a\n\t// valid block type.\n\tif (\n\t\ttransformationResults.some(\n\t\t\t( result ) => ! getBlockType( result.name )\n\t\t)\n\t) {\n\t\treturn null;\n\t}\n\n\tconst hasSwitchedBlock =\n\t\tname === '*' ||\n\t\tsome( transformationResults, ( result ) => result.name === name );\n\n\t// Ensure that at least one block object returned by the transformation has\n\t// the expected \"destination\" block type.\n\tif ( ! hasSwitchedBlock ) {\n\t\treturn null;\n\t}\n\n\tconst ret = transformationResults.map( ( result, index, results ) => {\n\t\t/**\n\t\t * Filters an individual transform result from block transformation.\n\t\t * All of the original blocks are passed, since transformations are\n\t\t * many-to-many, not one-to-one.\n\t\t *\n\t\t * @param {Object}   transformedBlock The transformed block.\n\t\t * @param {Object[]} blocks           Original blocks transformed.\n\t\t * @param {Object[]} index            Index of the transformed block on the array of results.\n\t\t * @param {Object[]} results          An array all the blocks that resulted from the transformation.\n\t\t */\n\t\treturn applyFilters(\n\t\t\t'blocks.switchToBlockType.transformedBlock',\n\t\t\tresult,\n\t\t\tblocks,\n\t\t\tindex,\n\t\t\tresults\n\t\t);\n\t} );\n\n\treturn ret;\n}\n\n/**\n * Create a block object from the example API.\n *\n * @param {string} name\n * @param {Object} example\n *\n * @return {Object} block.\n */\nexport const getBlockFromExample = ( name, example ) => {\n\treturn createBlock(\n\t\tname,\n\t\texample.attributes,\n\t\tmap( example.innerBlocks, ( innerBlock ) =>\n\t\t\tgetBlockFromExample( innerBlock.name, innerBlock )\n\t\t)\n\t);\n};\n"]}