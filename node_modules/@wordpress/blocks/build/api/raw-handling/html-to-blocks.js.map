{"version":3,"sources":["@wordpress/blocks/src/api/raw-handling/html-to-blocks.js"],"names":["htmlToBlocks","html","doc","document","implementation","createHTMLDocument","body","innerHTML","Array","from","children","flatMap","node","rawTransform","isMatch","outerHTML","transform","blockName"],"mappings":";;;;;;;AAGA;;AACA;;AACA;;AALA;AACA;AACA;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASA,YAAT,CAAuBC,IAAvB,EAA8B;AACpC,QAAMC,GAAG,GAAGC,QAAQ,CAACC,cAAT,CAAwBC,kBAAxB,CAA4C,EAA5C,CAAZ;AAEAH,EAAAA,GAAG,CAACI,IAAJ,CAASC,SAAT,GAAqBN,IAArB;AAEA,SAAOO,KAAK,CAACC,IAAN,CAAYP,GAAG,CAACI,IAAJ,CAASI,QAArB,EAAgCC,OAAhC,CAA2CC,IAAF,IAAY;AAC3D,UAAMC,YAAY,GAAG,4BACpB,yCADoB,EAEpB;AAAA,UAAE;AAAEC,QAAAA;AAAF,OAAF;AAAA,aAAmBA,OAAO,CAAEF,IAAF,CAA1B;AAAA,KAFoB,CAArB;;AAKA,QAAK,CAAEC,YAAP,EAAsB;AACrB,aAAO,2BACN;AACA,iBAFM,EAGN,4CAAoB,WAApB,EAAiCD,IAAI,CAACG,SAAtC,CAHM,CAAP;AAKA;;AAED,UAAM;AAAEC,MAAAA,SAAF;AAAaC,MAAAA;AAAb,QAA2BJ,YAAjC;;AAEA,QAAKG,SAAL,EAAiB;AAChB,aAAOA,SAAS,CAAEJ,IAAF,CAAhB;AACA;;AAED,WAAO,0BACNK,SADM,EAEN,4CAAoBA,SAApB,EAA+BL,IAAI,CAACG,SAApC,CAFM,CAAP;AAIA,GAxBM,CAAP;AAyBA","sourcesContent":["/**\n * Internal dependencies\n */\nimport { createBlock, findTransform } from '../factory';\nimport { getBlockAttributes } from '../parser/get-block-attributes';\nimport { getRawTransforms } from './get-raw-transforms';\n\n/**\n * Converts HTML directly to blocks. Looks for a matching transform for each\n * top-level tag. The HTML should be filtered to not have any text between\n * top-level tags and formatted in a way that blocks can handle the HTML.\n *\n * @param {string} html HTML to convert.\n *\n * @return {Array} An array of blocks.\n */\nexport function htmlToBlocks( html ) {\n\tconst doc = document.implementation.createHTMLDocument( '' );\n\n\tdoc.body.innerHTML = html;\n\n\treturn Array.from( doc.body.children ).flatMap( ( node ) => {\n\t\tconst rawTransform = findTransform(\n\t\t\tgetRawTransforms(),\n\t\t\t( { isMatch } ) => isMatch( node )\n\t\t);\n\n\t\tif ( ! rawTransform ) {\n\t\t\treturn createBlock(\n\t\t\t\t// Should not be hardcoded.\n\t\t\t\t'core/html',\n\t\t\t\tgetBlockAttributes( 'core/html', node.outerHTML )\n\t\t\t);\n\t\t}\n\n\t\tconst { transform, blockName } = rawTransform;\n\n\t\tif ( transform ) {\n\t\t\treturn transform( node );\n\t\t}\n\n\t\treturn createBlock(\n\t\t\tblockName,\n\t\t\tgetBlockAttributes( blockName, node.outerHTML )\n\t\t);\n\t} );\n}\n"]}