{"version":3,"sources":["@wordpress/blocks/src/api/raw-handling/index.js"],"names":["deprecatedGetPhrasingContentSchema","context","since","alternative","rawHandler","HTML","indexOf","pieces","blockContentSchema","piece","filters","listReducer","specialCommentConverter","figureContentReducer","blockquoteNormaliser"],"mappings":";;;;;;;;;;;;;;;;AAGA;;AAKA;;AACA;;AAKA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAEA;;AAxBA;AACA;AACA;;AAGA;AACA;AACA;;AAIA;AACA;AACA;AAaO,SAASA,kCAAT,CAA6CC,OAA7C,EAAuD;AAC7D,2BAAY,oCAAZ,EAAkD;AACjDC,IAAAA,KAAK,EAAE,KAD0C;AAEjDC,IAAAA,WAAW,EAAE;AAFoC,GAAlD;AAIA,SAAO,mCAA0BF,OAA1B,CAAP;AACA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACO,SAASG,UAAT,OAAqC;AAAA,MAAhB;AAAEC,IAAAA,IAAI,GAAG;AAAT,GAAgB;;AAC3C;AACA,MAAKA,IAAI,CAACC,OAAL,CAAc,UAAd,MAA+B,CAAC,CAArC,EAAyC;AACxC,WAAO,qBAAOD,IAAP,CAAP;AACA,GAJ0C,CAM3C;AACA;;;AACA,QAAME,MAAM,GAAG,iCAAoBF,IAApB,CAAf;AACA,QAAMG,kBAAkB,GAAG,mCAA3B;AAEA,SAAO,qBACN,qBAASD,MAAT,EAAmBE,KAAF,IAAa;AAC7B;AACA,QAAK,OAAOA,KAAP,KAAiB,QAAtB,EAAiC;AAChC,aAAOA,KAAP;AACA,KAJ4B,CAM7B;AACA;AACA;;;AACA,UAAMC,OAAO,GAAG,CACf;AACAC,wBAFe,EAGf;AACAC,oCAJe,EAKf;AACAC,iCANe,EAOf;AACA;AACAC,iCATe,CAAhB;AAYAL,IAAAA,KAAK,GAAG,2BAAgBA,KAAhB,EAAuBC,OAAvB,EAAgCF,kBAAhC,CAAR;AACAC,IAAAA,KAAK,GAAG,8BAAiBA,KAAjB,CAAR;AAEA,WAAO,gCAAcA,KAAd,CAAP;AACA,GAzBD,CADM,CAAP;AA4BA","sourcesContent":["/**\n * External dependencies\n */\nimport { flatMap, compact } from 'lodash';\n\n/**\n * WordPress dependencies\n */\nimport deprecated from '@wordpress/deprecated';\nimport { getPhrasingContentSchema } from '@wordpress/dom';\n\n/**\n * Internal dependencies\n */\nimport { htmlToBlocks } from './html-to-blocks';\nimport parse from '../parser';\nimport normaliseBlocks from './normalise-blocks';\nimport specialCommentConverter from './special-comment-converter';\nimport listReducer from './list-reducer';\nimport blockquoteNormaliser from './blockquote-normaliser';\nimport figureContentReducer from './figure-content-reducer';\nimport shortcodeConverter from './shortcode-converter';\nimport { deepFilterHTML, getBlockContentSchema } from './utils';\n\nexport { pasteHandler } from './paste-handler';\n\nexport function deprecatedGetPhrasingContentSchema( context ) {\n\tdeprecated( 'wp.blocks.getPhrasingContentSchema', {\n\t\tsince: '5.6',\n\t\talternative: 'wp.dom.getPhrasingContentSchema',\n\t} );\n\treturn getPhrasingContentSchema( context );\n}\n\n/**\n * Converts an HTML string to known blocks.\n *\n * @param {Object} $1\n * @param {string} $1.HTML The HTML to convert.\n *\n * @return {Array} A list of blocks.\n */\nexport function rawHandler( { HTML = '' } ) {\n\t// If we detect block delimiters, parse entirely as blocks.\n\tif ( HTML.indexOf( '<!-- wp:' ) !== -1 ) {\n\t\treturn parse( HTML );\n\t}\n\n\t// An array of HTML strings and block objects. The blocks replace matched\n\t// shortcodes.\n\tconst pieces = shortcodeConverter( HTML );\n\tconst blockContentSchema = getBlockContentSchema();\n\n\treturn compact(\n\t\tflatMap( pieces, ( piece ) => {\n\t\t\t// Already a block from shortcode.\n\t\t\tif ( typeof piece !== 'string' ) {\n\t\t\t\treturn piece;\n\t\t\t}\n\n\t\t\t// These filters are essential for some blocks to be able to transform\n\t\t\t// from raw HTML. These filters move around some content or add\n\t\t\t// additional tags, they do not remove any content.\n\t\t\tconst filters = [\n\t\t\t\t// Needed to adjust invalid lists.\n\t\t\t\tlistReducer,\n\t\t\t\t// Needed to create more and nextpage blocks.\n\t\t\t\tspecialCommentConverter,\n\t\t\t\t// Needed to create media blocks.\n\t\t\t\tfigureContentReducer,\n\t\t\t\t// Needed to create the quote block, which cannot handle text\n\t\t\t\t// without wrapper paragraphs.\n\t\t\t\tblockquoteNormaliser,\n\t\t\t];\n\n\t\t\tpiece = deepFilterHTML( piece, filters, blockContentSchema );\n\t\t\tpiece = normaliseBlocks( piece );\n\n\t\t\treturn htmlToBlocks( piece );\n\t\t} )\n\t);\n}\n"]}