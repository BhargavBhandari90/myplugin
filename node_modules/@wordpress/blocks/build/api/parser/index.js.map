{"version":3,"sources":["@wordpress/blocks/src/api/parser/index.js"],"names":["convertLegacyBlocks","rawBlock","correctName","correctedAttributes","blockName","attrs","normalizeRawBlock","fallbackBlockName","rawBlockName","rawAttributes","rawInnerBlocks","innerBlocks","rawInnerHTML","innerHTML","trim","createMissingBlockType","unregisteredFallbackBlock","originalUndelimitedContent","isCommentDelimited","originalContent","originalName","innerContent","applyBlockValidation","unvalidatedBlock","blockType","isValid","validationIssues","fixedBlock","isFixedValid","parseRawBlock","options","normalizedBlock","isFallbackBlock","parsedInnerBlocks","map","innerBlock","filter","parsedBlock","validatedBlock","updatedBlock","__unstableBlockSource","__unstableSkipMigrationLogs","console","groupCollapsed","name","info","attributes","groupEnd","forEach","log","args","parse","content","reduce","accumulator","block","push"],"mappings":"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","sourcesContent":["/**\n * WordPress dependencies\n */\nimport { parse as grammarParse } from '@wordpress/block-serialization-default-parser';\nimport { autop } from '@wordpress/autop';\n\n/**\n * Internal dependencies\n */\nimport {\n\tgetFreeformContentHandlerName,\n\tgetUnregisteredTypeHandlerName,\n\tgetBlockType,\n} from '../registration';\nimport { getSaveContent } from '../serializer';\nimport { validateBlock } from '../validation';\nimport { createBlock } from '../factory';\nimport { convertLegacyBlockNameAndAttributes } from './convert-legacy-block';\nimport { serializeRawBlock } from './serialize-raw-block';\nimport { getBlockAttributes } from './get-block-attributes';\nimport { applyBlockDeprecatedVersions } from './apply-block-deprecated-versions';\nimport { applyBuiltInValidationFixes } from './apply-built-in-validation-fixes';\n\n/**\n * The raw structure of a block includes its attributes, inner\n * blocks, and inner HTML. It is important to distinguish inner blocks from\n * the HTML content of the block as only the latter is relevant for block\n * validation and edit operations.\n *\n * @typedef WPRawBlock\n *\n * @property {string=}         blockName    Block name\n * @property {Object=}         attrs        Block raw or comment attributes.\n * @property {string}          innerHTML    HTML content of the block.\n * @property {(string|null)[]} innerContent Content without inner blocks.\n * @property {WPRawBlock[]}    innerBlocks  Inner Blocks.\n */\n\n/**\n * Fully parsed block object.\n *\n * @typedef WPBlock\n *\n * @property {string}     name                    Block name\n * @property {Object}     attributes              Block raw or comment attributes.\n * @property {WPBlock[]}  innerBlocks             Inner Blocks.\n * @property {string}     originalContent         Original content of the block before validation fixes.\n * @property {boolean}    isValid                 Whether the block is valid.\n * @property {Object[]}   validationIssues        Validation issues.\n * @property {WPRawBlock} [__unstableBlockSource] Un-processed original copy of block if created through parser.\n */\n\n/**\n * @typedef  {Object}  ParseOptions\n * @property {boolean} __unstableSkipMigrationLogs If a block is migrated from a deprecated version, skip logging the migration details.\n */\n\n/**\n * Convert legacy blocks to their canonical form. This function is used\n * both in the parser level for previous content and to convert such blocks\n * used in Custom Post Types templates.\n *\n * @param {WPRawBlock} rawBlock\n *\n * @return {WPRawBlock} The block's name and attributes, changed accordingly if a match was found\n */\nfunction convertLegacyBlocks( rawBlock ) {\n\tconst [ correctName, correctedAttributes ] =\n\t\tconvertLegacyBlockNameAndAttributes(\n\t\t\trawBlock.blockName,\n\t\t\trawBlock.attrs\n\t\t);\n\treturn {\n\t\t...rawBlock,\n\t\tblockName: correctName,\n\t\tattrs: correctedAttributes,\n\t};\n}\n\n/**\n * Normalize the raw block by applying the fallback block name if none given,\n * sanitize the parsed HTML...\n *\n * @param {WPRawBlock} rawBlock The raw block object.\n *\n * @return {WPRawBlock} The normalized block object.\n */\nexport function normalizeRawBlock( rawBlock ) {\n\tconst fallbackBlockName = getFreeformContentHandlerName();\n\n\t// If the grammar parsing don't produce any block name, use the freeform block.\n\tconst rawBlockName = rawBlock.blockName || getFreeformContentHandlerName();\n\tconst rawAttributes = rawBlock.attrs || {};\n\tconst rawInnerBlocks = rawBlock.innerBlocks || [];\n\tlet rawInnerHTML = rawBlock.innerHTML.trim();\n\n\t// Fallback content may be upgraded from classic content expecting implicit\n\t// automatic paragraphs, so preserve them. Assumes wpautop is idempotent,\n\t// meaning there are no negative consequences to repeated autop calls.\n\tif ( rawBlockName === fallbackBlockName ) {\n\t\trawInnerHTML = autop( rawInnerHTML ).trim();\n\t}\n\n\treturn {\n\t\t...rawBlock,\n\t\tblockName: rawBlockName,\n\t\tattrs: rawAttributes,\n\t\tinnerHTML: rawInnerHTML,\n\t\tinnerBlocks: rawInnerBlocks,\n\t};\n}\n\n/**\n * Uses the \"unregistered blockType\" to create a block object.\n *\n * @param {WPRawBlock} rawBlock block.\n *\n * @return {WPRawBlock} The unregistered block object.\n */\nfunction createMissingBlockType( rawBlock ) {\n\tconst unregisteredFallbackBlock =\n\t\tgetUnregisteredTypeHandlerName() || getFreeformContentHandlerName();\n\n\t// Preserve undelimited content for use by the unregistered type\n\t// handler. A block node's `innerHTML` isn't enough, as that field only\n\t// carries the block's own HTML and not its nested blocks.\n\tconst originalUndelimitedContent = serializeRawBlock( rawBlock, {\n\t\tisCommentDelimited: false,\n\t} );\n\n\t// Preserve full block content for use by the unregistered type\n\t// handler, block boundaries included.\n\tconst originalContent = serializeRawBlock( rawBlock, {\n\t\tisCommentDelimited: true,\n\t} );\n\n\treturn {\n\t\tblockName: unregisteredFallbackBlock,\n\t\tattrs: {\n\t\t\toriginalName: rawBlock.blockName,\n\t\t\toriginalContent,\n\t\t\toriginalUndelimitedContent,\n\t\t},\n\t\tinnerHTML: rawBlock.blockName ? originalContent : rawBlock.innerHTML,\n\t\tinnerBlocks: rawBlock.innerBlocks,\n\t\tinnerContent: rawBlock.innerContent,\n\t};\n}\n\n/**\n * Validates a block and wraps with validation meta.\n *\n * The name here is regrettable but `validateBlock` is already taken.\n *\n * @param {WPBlock}                               unvalidatedBlock\n * @param {import('../registration').WPBlockType} blockType\n * @return {WPBlock}                              validated block, with auto-fixes if initially invalid\n */\nfunction applyBlockValidation( unvalidatedBlock, blockType ) {\n\t// Attempt to validate the block.\n\tconst [ isValid ] = validateBlock( unvalidatedBlock, blockType );\n\n\tif ( isValid ) {\n\t\treturn { ...unvalidatedBlock, isValid, validationIssues: [] };\n\t}\n\n\t// If the block is invalid, attempt some built-in fixes\n\t// like custom classNames handling.\n\tconst fixedBlock = applyBuiltInValidationFixes(\n\t\tunvalidatedBlock,\n\t\tblockType\n\t);\n\t// Attempt to validate the block once again after the built-in fixes.\n\tconst [ isFixedValid, validationIssues ] = validateBlock(\n\t\tunvalidatedBlock,\n\t\tblockType\n\t);\n\n\treturn { ...fixedBlock, isValid: isFixedValid, validationIssues };\n}\n\n/**\n * Given a raw block returned by grammar parsing, returns a fully parsed block.\n *\n * @param {WPRawBlock}   rawBlock The raw block object.\n * @param {ParseOptions} options  Extra options for handling block parsing.\n *\n * @return {WPBlock} Fully parsed block.\n */\nexport function parseRawBlock( rawBlock, options ) {\n\tlet normalizedBlock = normalizeRawBlock( rawBlock );\n\n\t// During the lifecycle of the project, we renamed some old blocks\n\t// and transformed others to new blocks. To avoid breaking existing content,\n\t// we added this function to properly parse the old content.\n\tnormalizedBlock = convertLegacyBlocks( normalizedBlock );\n\n\t// Try finding the type for known block name.\n\tlet blockType = getBlockType( normalizedBlock.blockName );\n\n\t// If not blockType is found for the specified name, fallback to the \"unregistedBlockType\".\n\tif ( ! blockType ) {\n\t\tnormalizedBlock = createMissingBlockType( normalizedBlock );\n\t\tblockType = getBlockType( normalizedBlock.blockName );\n\t}\n\n\t// If it's an empty freeform block or there's no blockType (no missing block handler)\n\t// Then, just ignore the block.\n\t// It might be a good idea to throw a warning here.\n\t// TODO: I'm unsure about the unregisteredFallbackBlock check,\n\t// it might ignore some dynamic unregistered third party blocks wrongly.\n\tconst isFallbackBlock =\n\t\tnormalizedBlock.blockName === getFreeformContentHandlerName() ||\n\t\tnormalizedBlock.blockName === getUnregisteredTypeHandlerName();\n\tif ( ! blockType || ( ! normalizedBlock.innerHTML && isFallbackBlock ) ) {\n\t\treturn;\n\t}\n\n\t// Parse inner blocks recursively.\n\tconst parsedInnerBlocks = normalizedBlock.innerBlocks\n\t\t.map( ( innerBlock ) => parseRawBlock( innerBlock, options ) )\n\t\t// See https://github.com/WordPress/gutenberg/pull/17164.\n\t\t.filter( ( innerBlock ) => !! innerBlock );\n\n\t// Get the fully parsed block.\n\tconst parsedBlock = createBlock(\n\t\tnormalizedBlock.blockName,\n\t\tgetBlockAttributes(\n\t\t\tblockType,\n\t\t\tnormalizedBlock.innerHTML,\n\t\t\tnormalizedBlock.attrs\n\t\t),\n\t\tparsedInnerBlocks\n\t);\n\tparsedBlock.originalContent = normalizedBlock.innerHTML;\n\n\tconst validatedBlock = applyBlockValidation( parsedBlock, blockType );\n\tconst { validationIssues } = validatedBlock;\n\n\t// Run the block deprecation and migrations.\n\t// This is performed on both invalid and valid blocks because\n\t// migration using the `migrate` functions should run even\n\t// if the output is deemed valid.\n\tconst updatedBlock = applyBlockDeprecatedVersions(\n\t\tvalidatedBlock,\n\t\tnormalizedBlock,\n\t\tblockType\n\t);\n\n\tif ( ! updatedBlock.isValid ) {\n\t\t// Preserve the original unprocessed version of the block\n\t\t// that we received (no fixes, no deprecations) so that\n\t\t// we can save it as close to exactly the same way as\n\t\t// we loaded it. This is important to avoid corruption\n\t\t// and data loss caused by block implementations trying\n\t\t// to process data that isn't fully recognized.\n\t\tupdatedBlock.__unstableBlockSource = rawBlock;\n\t}\n\n\tif (\n\t\t! validatedBlock.isValid &&\n\t\tupdatedBlock.isValid &&\n\t\t! options?.__unstableSkipMigrationLogs\n\t) {\n\t\t/* eslint-disable no-console */\n\t\tconsole.groupCollapsed( 'Updated Block: %s', blockType.name );\n\t\tconsole.info(\n\t\t\t'Block successfully updated for `%s` (%o).\\n\\nNew content generated by `save` function:\\n\\n%s\\n\\nContent retrieved from post body:\\n\\n%s',\n\t\t\tblockType.name,\n\t\t\tblockType,\n\t\t\tgetSaveContent( blockType, updatedBlock.attributes ),\n\t\t\tupdatedBlock.originalContent\n\t\t);\n\t\tconsole.groupEnd();\n\t\t/* eslint-enable no-console */\n\t} else if ( ! validatedBlock.isValid && ! updatedBlock.isValid ) {\n\t\tvalidationIssues.forEach( ( { log, args } ) => log( ...args ) );\n\t}\n\n\treturn updatedBlock;\n}\n\n/**\n * Utilizes an optimized token-driven parser based on the Gutenberg grammar spec\n * defined through a parsing expression grammar to take advantage of the regular\n * cadence provided by block delimiters -- composed syntactically through HTML\n * comments -- which, given a general HTML document as an input, returns a block\n * list array representation.\n *\n * This is a recursive-descent parser that scans linearly once through the input\n * document. Instead of directly recursing it utilizes a trampoline mechanism to\n * prevent stack overflow. This initial pass is mainly interested in separating\n * and isolating the blocks serialized in the document and manifestly not in the\n * content within the blocks.\n *\n * @see\n * https://developer.wordpress.org/block-editor/packages/packages-block-serialization-default-parser/\n *\n * @param {string}       content The post content.\n * @param {ParseOptions} options Extra options for handling block parsing.\n *\n * @return {Array} Block list.\n */\nexport default function parse( content, options ) {\n\treturn grammarParse( content ).reduce( ( accumulator, rawBlock ) => {\n\t\tconst block = parseRawBlock( rawBlock, options );\n\t\tif ( block ) {\n\t\t\taccumulator.push( block );\n\t\t}\n\t\treturn accumulator;\n\t}, [] );\n}\n"]}