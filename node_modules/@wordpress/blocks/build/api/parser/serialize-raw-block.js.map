{"version":3,"sources":["@wordpress/blocks/src/api/parser/serialize-raw-block.js"],"names":["serializeRawBlock","rawBlock","options","isCommentDelimited","blockName","attrs","innerBlocks","innerContent","childIndex","content","map","item","join","replace","trim"],"mappings":";;;;;;;AAGA;;AAHA;AACA;AACA;;AAGA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASA,iBAAT,CAA4BC,QAA5B,EAAqD;AAAA,MAAfC,OAAe,uEAAL,EAAK;AAC3D,QAAM;AAAEC,IAAAA,kBAAkB,GAAG;AAAvB,MAAgCD,OAAtC;AACA,QAAM;AACLE,IAAAA,SADK;AAELC,IAAAA,KAAK,GAAG,EAFH;AAGLC,IAAAA,WAAW,GAAG,EAHT;AAILC,IAAAA,YAAY,GAAG;AAJV,MAKFN,QALJ;AAOA,MAAIO,UAAU,GAAG,CAAjB;AACA,QAAMC,OAAO,GAAGF,YAAY,CAC1BG,GADc,CACPC,IAAF,IACL;AACAA,EAAAA,IAAI,KAAK,IAAT,GACGA,IADH,GAEGX,iBAAiB,CAAEM,WAAW,CAAEE,UAAU,EAAZ,CAAb,EAA+BN,OAA/B,CALN,EAOdU,IAPc,CAOR,IAPQ,EAQdC,OARc,CAQL,MARK,EAQG,IARH,EASdC,IATc,EAAhB;AAWA,SAAOX,kBAAkB,GACtB,4CAA4BC,SAA5B,EAAuCC,KAAvC,EAA8CI,OAA9C,CADsB,GAEtBA,OAFH;AAGA","sourcesContent":["/**\n * Internal dependencies\n */\nimport { getCommentDelimitedContent } from '../serializer';\n\n/**\n * @typedef {Object}   Options                   Serialization options.\n * @property {boolean} [isCommentDelimited=true] Whether to output HTML comments around blocks.\n */\n\n/** @typedef {import(\"./\").WPRawBlock} WPRawBlock */\n\n/**\n * Serializes a block node into the native HTML-comment-powered block format.\n * CAVEAT: This function is intended for re-serializing blocks as parsed by\n * valid parsers and skips any validation steps. This is NOT a generic\n * serialization function for in-memory blocks. For most purposes, see the\n * following functions available in the `@wordpress/blocks` package:\n *\n * @see serializeBlock\n * @see serialize\n *\n * For more on the format of block nodes as returned by valid parsers:\n *\n * @see `@wordpress/block-serialization-default-parser` package\n * @see `@wordpress/block-serialization-spec-parser` package\n *\n * @param {WPRawBlock} rawBlock     A block node as returned by a valid parser.\n * @param {Options}    [options={}] Serialization options.\n *\n * @return {string} An HTML string representing a block.\n */\nexport function serializeRawBlock( rawBlock, options = {} ) {\n\tconst { isCommentDelimited = true } = options;\n\tconst {\n\t\tblockName,\n\t\tattrs = {},\n\t\tinnerBlocks = [],\n\t\tinnerContent = [],\n\t} = rawBlock;\n\n\tlet childIndex = 0;\n\tconst content = innerContent\n\t\t.map( ( item ) =>\n\t\t\t// `null` denotes a nested block, otherwise we have an HTML fragment.\n\t\t\titem !== null\n\t\t\t\t? item\n\t\t\t\t: serializeRawBlock( innerBlocks[ childIndex++ ], options )\n\t\t)\n\t\t.join( '\\n' )\n\t\t.replace( /\\n+/g, '\\n' )\n\t\t.trim();\n\n\treturn isCommentDelimited\n\t\t? getCommentDelimitedContent( blockName, attrs, content )\n\t\t: content;\n}\n"]}