{"version":3,"sources":["@wordpress/blocks/src/api/parser/fix-custom-classname.js"],"names":["CLASS_ATTR_SCHEMA","type","source","selector","attribute","getHTMLRootElementClasses","innerHTML","parsed","trim","split","fixCustomClassname","blockAttributes","blockType","attributesSansClassName","serialized","defaultClasses","actualClasses","customClasses","length","className","join"],"mappings":";;;;;;;;AAGA;;AAKA;;AACA;;AACA;;AAVA;AACA;AACA;;AAGA;AACA;AACA;AAKA,MAAMA,iBAAiB,GAAG;AACzBC,EAAAA,IAAI,EAAE,QADmB;AAEzBC,EAAAA,MAAM,EAAE,WAFiB;AAGzBC,EAAAA,QAAQ,EAAE,8BAHe;AAIzBC,EAAAA,SAAS,EAAE;AAJc,CAA1B;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACO,SAASC,yBAAT,CAAoCC,SAApC,EAAgD;AACtD,QAAMC,MAAM,GAAG,kDACb,+BAA+BD,SAAW,QAD7B,EAEdN,iBAFc,CAAf;AAKA,SAAOO,MAAM,GAAGA,MAAM,CAACC,IAAP,GAAcC,KAAd,CAAqB,KAArB,CAAH,GAAkC,EAA/C;AACA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACO,SAASC,kBAAT,CAA6BC,eAA7B,EAA8CC,SAA9C,EAAyDN,SAAzD,EAAqE;AAC3E,MAAK,mCAAiBM,SAAjB,EAA4B,iBAA5B,EAA+C,IAA/C,CAAL,EAA6D;AAC5D;AACA;AACA;AACA;AACA,UAAMC,uBAAuB,GAAG,kBAAMF,eAAN,EAAuB,CACtD,WADsD,CAAvB,CAAhC;AAGA,UAAMG,UAAU,GAAG,gCAAgBF,SAAhB,EAA2BC,uBAA3B,CAAnB;AACA,UAAME,cAAc,GAAGV,yBAAyB,CAAES,UAAF,CAAhD;AACA,UAAME,aAAa,GAAGX,yBAAyB,CAAEC,SAAF,CAA/C;AACA,UAAMW,aAAa,GAAG,wBAAYD,aAAZ,EAA2BD,cAA3B,CAAtB;;AAEA,QAAKE,aAAa,CAACC,MAAnB,EAA4B;AAC3BP,MAAAA,eAAe,CAACQ,SAAhB,GAA4BF,aAAa,CAACG,IAAd,CAAoB,GAApB,CAA5B;AACA,KAFD,MAEO,IAAKN,UAAL,EAAkB;AACxB,aAAOH,eAAe,CAACQ,SAAvB;AACA;AACD;;AAED,SAAOR,eAAP;AACA","sourcesContent":["/**\n * External dependencies\n */\nimport { difference, omit } from 'lodash';\n\n/**\n * Internal dependencies\n */\nimport { hasBlockSupport } from '../registration';\nimport { getSaveContent } from '../serializer';\nimport { parseWithAttributeSchema } from './get-block-attributes';\n\nconst CLASS_ATTR_SCHEMA = {\n\ttype: 'string',\n\tsource: 'attribute',\n\tselector: '[data-custom-class-name] > *',\n\tattribute: 'class',\n};\n\n/**\n * Given an HTML string, returns an array of class names assigned to the root\n * element in the markup.\n *\n * @param {string} innerHTML Markup string from which to extract classes.\n *\n * @return {string[]} Array of class names assigned to the root element.\n */\nexport function getHTMLRootElementClasses( innerHTML ) {\n\tconst parsed = parseWithAttributeSchema(\n\t\t`<div data-custom-class-name>${ innerHTML }</div>`,\n\t\tCLASS_ATTR_SCHEMA\n\t);\n\n\treturn parsed ? parsed.trim().split( /\\s+/ ) : [];\n}\n\n/**\n * Given a parsed set of block attributes, if the block supports custom class\n * names and an unknown class (per the block's serialization behavior) is\n * found, the unknown classes are treated as custom classes. This prevents the\n * block from being considered as invalid.\n *\n * @param {Object} blockAttributes Original block attributes.\n * @param {Object} blockType       Block type settings.\n * @param {string} innerHTML       Original block markup.\n *\n * @return {Object} Filtered block attributes.\n */\nexport function fixCustomClassname( blockAttributes, blockType, innerHTML ) {\n\tif ( hasBlockSupport( blockType, 'customClassName', true ) ) {\n\t\t// To determine difference, serialize block given the known set of\n\t\t// attributes, with the exception of `className`. This will determine\n\t\t// the default set of classes. From there, any difference in innerHTML\n\t\t// can be considered as custom classes.\n\t\tconst attributesSansClassName = omit( blockAttributes, [\n\t\t\t'className',\n\t\t] );\n\t\tconst serialized = getSaveContent( blockType, attributesSansClassName );\n\t\tconst defaultClasses = getHTMLRootElementClasses( serialized );\n\t\tconst actualClasses = getHTMLRootElementClasses( innerHTML );\n\t\tconst customClasses = difference( actualClasses, defaultClasses );\n\n\t\tif ( customClasses.length ) {\n\t\t\tblockAttributes.className = customClasses.join( ' ' );\n\t\t} else if ( serialized ) {\n\t\t\tdelete blockAttributes.className;\n\t\t}\n\t}\n\n\treturn blockAttributes;\n}\n"]}