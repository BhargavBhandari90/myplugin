{"version":3,"sources":["@wordpress/blocks/src/api/node.js"],"names":["isNodeOfType","node","type","getNamedNodeMapAsObject","nodeMap","result","i","length","name","value","fromDOM","domNode","nodeType","TEXT_NODE","nodeValue","ELEMENT_NODE","TypeError","nodeName","toLowerCase","props","attributes","children","childNodes","toHTML","matcher","selector","match","querySelector","error"],"mappings":";;;;;;;;;;;AAGA;;;;;;AAHA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,YAAT,CAAuBC,IAAvB,EAA6BC,IAA7B,EAAoC;AACnC,SAAOD,IAAI,IAAIA,IAAI,CAACC,IAAL,KAAcA,IAA7B;AACA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACO,SAASC,uBAAT,CAAkCC,OAAlC,EAA4C;AAClD,QAAMC,MAAM,GAAG,EAAf;;AACA,OAAM,IAAIC,CAAC,GAAG,CAAd,EAAiBA,CAAC,GAAGF,OAAO,CAACG,MAA7B,EAAqCD,CAAC,EAAtC,EAA2C;AAC1C,UAAM;AAAEE,MAAAA,IAAF;AAAQC,MAAAA;AAAR,QAAkBL,OAAO,CAAEE,CAAF,CAA/B;AACAD,IAAAA,MAAM,CAAEG,IAAF,CAAN,GAAiBC,KAAjB;AACA;;AAED,SAAOJ,MAAP;AACA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACO,SAASK,OAAT,CAAkBC,OAAlB,EAA4B;AAClC,MAAKA,OAAO,CAACC,QAAR,KAAqBD,OAAO,CAACE,SAAlC,EAA8C;AAC7C,WAAOF,OAAO,CAACG,SAAf;AACA;;AAED,MAAKH,OAAO,CAACC,QAAR,KAAqBD,OAAO,CAACI,YAAlC,EAAiD;AAChD,UAAM,IAAIC,SAAJ,CACL,kEACC,UAFI,CAAN;AAIA;;AAED,SAAO;AACNd,IAAAA,IAAI,EAAES,OAAO,CAACM,QAAR,CAAiBC,WAAjB,EADA;AAENC,IAAAA,KAAK,EAAE,EACN,GAAGhB,uBAAuB,CAAEQ,OAAO,CAACS,UAAV,CADpB;AAENC,MAAAA,QAAQ,EAAEA,QAAQ,CAACX,OAAT,CAAkBC,OAAO,CAACW,UAA1B;AAFJ;AAFD,GAAP;AAOA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;;AACO,SAASC,MAAT,CAAiBtB,IAAjB,EAAwB;AAC9B,SAAOoB,QAAQ,CAACE,MAAT,CAAiB,CAAEtB,IAAF,CAAjB,CAAP;AACA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACO,SAASuB,OAAT,CAAkBC,QAAlB,EAA6B;AACnC,SAASd,OAAF,IAAe;AACrB,QAAIe,KAAK,GAAGf,OAAZ;;AAEA,QAAKc,QAAL,EAAgB;AACfC,MAAAA,KAAK,GAAGf,OAAO,CAACgB,aAAR,CAAuBF,QAAvB,CAAR;AACA;;AAED,QAAI;AACH,aAAOf,OAAO,CAAEgB,KAAF,CAAd;AACA,KAFD,CAEE,OAAQE,KAAR,EAAgB;AACjB,aAAO,IAAP;AACA;AACD,GAZD;AAaA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;eACe;AACd5B,EAAAA,YADc;AAEdU,EAAAA,OAFc;AAGda,EAAAA,MAHc;AAIdC,EAAAA;AAJc,C","sourcesContent":["/**\n * Internal dependencies\n */\nimport * as children from './children';\n\n/**\n * A representation of a single node within a block's rich text value. If\n * representing a text node, the value is simply a string of the node value.\n * As representing an element node, it is an object of:\n *\n * 1. `type` (string): Tag name.\n * 2. `props` (object): Attributes and children array of WPBlockNode.\n *\n * @typedef {string|Object} WPBlockNode\n */\n\n/**\n * Given a single node and a node type (e.g. `'br'`), returns true if the node\n * corresponds to that type, false otherwise.\n *\n * @param {WPBlockNode} node Block node to test\n * @param {string}      type Node to type to test against.\n *\n * @return {boolean} Whether node is of intended type.\n */\nfunction isNodeOfType( node, type ) {\n\treturn node && node.type === type;\n}\n\n/**\n * Given an object implementing the NamedNodeMap interface, returns a plain\n * object equivalent value of name, value key-value pairs.\n *\n * @see https://dom.spec.whatwg.org/#interface-namednodemap\n *\n * @param {NamedNodeMap} nodeMap NamedNodeMap to convert to object.\n *\n * @return {Object} Object equivalent value of NamedNodeMap.\n */\nexport function getNamedNodeMapAsObject( nodeMap ) {\n\tconst result = {};\n\tfor ( let i = 0; i < nodeMap.length; i++ ) {\n\t\tconst { name, value } = nodeMap[ i ];\n\t\tresult[ name ] = value;\n\t}\n\n\treturn result;\n}\n\n/**\n * Given a DOM Element or Text node, returns an equivalent block node. Throws\n * if passed any node type other than element or text.\n *\n * @throws {TypeError} If non-element/text node is passed.\n *\n * @param {Node} domNode DOM node to convert.\n *\n * @return {WPBlockNode} Block node equivalent to DOM node.\n */\nexport function fromDOM( domNode ) {\n\tif ( domNode.nodeType === domNode.TEXT_NODE ) {\n\t\treturn domNode.nodeValue;\n\t}\n\n\tif ( domNode.nodeType !== domNode.ELEMENT_NODE ) {\n\t\tthrow new TypeError(\n\t\t\t'A block node can only be created from a node of type text or ' +\n\t\t\t\t'element.'\n\t\t);\n\t}\n\n\treturn {\n\t\ttype: domNode.nodeName.toLowerCase(),\n\t\tprops: {\n\t\t\t...getNamedNodeMapAsObject( domNode.attributes ),\n\t\t\tchildren: children.fromDOM( domNode.childNodes ),\n\t\t},\n\t};\n}\n\n/**\n * Given a block node, returns its HTML string representation.\n *\n * @param {WPBlockNode} node Block node to convert to string.\n *\n * @return {string} String HTML representation of block node.\n */\nexport function toHTML( node ) {\n\treturn children.toHTML( [ node ] );\n}\n\n/**\n * Given a selector, returns an hpq matcher generating a WPBlockNode value\n * matching the selector result.\n *\n * @param {string} selector DOM selector.\n *\n * @return {Function} hpq matcher.\n */\nexport function matcher( selector ) {\n\treturn ( domNode ) => {\n\t\tlet match = domNode;\n\n\t\tif ( selector ) {\n\t\t\tmatch = domNode.querySelector( selector );\n\t\t}\n\n\t\ttry {\n\t\t\treturn fromDOM( match );\n\t\t} catch ( error ) {\n\t\t\treturn null;\n\t\t}\n\t};\n}\n\n/**\n * Object of utility functions used in managing block attribute values of\n * source `node`.\n *\n * @see https://github.com/WordPress/gutenberg/pull/10439\n *\n * @deprecated since 4.0. The `node` source should not be used, and can be\n *             replaced by the `html` source.\n *\n * @private\n */\nexport default {\n\tisNodeOfType,\n\tfromDOM,\n\ttoHTML,\n\tmatcher,\n};\n"]}