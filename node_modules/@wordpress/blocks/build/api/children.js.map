{"version":3,"sources":["@wordpress/blocks/src/api/children.js"],"names":["getSerializeCapableElement","children","getChildrenArray","concat","result","i","length","blockNode","j","child","canConcatToPreviousString","push","fromDOM","domNodes","node","error","toHTML","element","matcher","selector","domNode","match","querySelector","childNodes"],"mappings":"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","sourcesContent":["/**\n * External dependencies\n */\nimport { castArray } from 'lodash';\n\n/**\n * WordPress dependencies\n */\nimport { renderToString } from '@wordpress/element';\n\n/**\n * Internal dependencies\n */\nimport * as node from './node';\n\n/**\n * A representation of a block's rich text value.\n *\n * @typedef {WPBlockNode[]} WPBlockChildren\n */\n\n/**\n * Given block children, returns a serialize-capable WordPress element.\n *\n * @param {WPBlockChildren} children Block children object to convert.\n *\n * @return {WPElement} A serialize-capable element.\n */\nexport function getSerializeCapableElement( children ) {\n\t// The fact that block children are compatible with the element serializer is\n\t// merely an implementation detail that currently serves to be true, but\n\t// should not be mistaken as being a guarantee on the external API. The\n\t// public API only offers guarantees to work with strings (toHTML) and DOM\n\t// elements (fromDOM), and should provide utilities to manipulate the value\n\t// rather than expect consumers to inspect or construct its shape (concat).\n\treturn children;\n}\n\n/**\n * Given block children, returns an array of block nodes.\n *\n * @param {WPBlockChildren} children Block children object to convert.\n *\n * @return {Array<WPBlockNode>} An array of individual block nodes.\n */\nfunction getChildrenArray( children ) {\n\t// The fact that block children are compatible with the element serializer\n\t// is merely an implementation detail that currently serves to be true, but\n\t// should not be mistaken as being a guarantee on the external API.\n\treturn children;\n}\n\n/**\n * Given two or more block nodes, returns a new block node representing a\n * concatenation of its values.\n *\n * @param {...WPBlockChildren} blockNodes Block nodes to concatenate.\n *\n * @return {WPBlockChildren} Concatenated block node.\n */\nexport function concat( ...blockNodes ) {\n\tconst result = [];\n\tfor ( let i = 0; i < blockNodes.length; i++ ) {\n\t\tconst blockNode = castArray( blockNodes[ i ] );\n\t\tfor ( let j = 0; j < blockNode.length; j++ ) {\n\t\t\tconst child = blockNode[ j ];\n\t\t\tconst canConcatToPreviousString =\n\t\t\t\ttypeof child === 'string' &&\n\t\t\t\ttypeof result[ result.length - 1 ] === 'string';\n\n\t\t\tif ( canConcatToPreviousString ) {\n\t\t\t\tresult[ result.length - 1 ] += child;\n\t\t\t} else {\n\t\t\t\tresult.push( child );\n\t\t\t}\n\t\t}\n\t}\n\n\treturn result;\n}\n\n/**\n * Given an iterable set of DOM nodes, returns equivalent block children.\n * Ignores any non-element/text nodes included in set.\n *\n * @param {Iterable.<Node>} domNodes Iterable set of DOM nodes to convert.\n *\n * @return {WPBlockChildren} Block children equivalent to DOM nodes.\n */\nexport function fromDOM( domNodes ) {\n\tconst result = [];\n\tfor ( let i = 0; i < domNodes.length; i++ ) {\n\t\ttry {\n\t\t\tresult.push( node.fromDOM( domNodes[ i ] ) );\n\t\t} catch ( error ) {\n\t\t\t// Simply ignore if DOM node could not be converted.\n\t\t}\n\t}\n\n\treturn result;\n}\n\n/**\n * Given a block node, returns its HTML string representation.\n *\n * @param {WPBlockChildren} children Block node(s) to convert to string.\n *\n * @return {string} String HTML representation of block node.\n */\nexport function toHTML( children ) {\n\tconst element = getSerializeCapableElement( children );\n\n\treturn renderToString( element );\n}\n\n/**\n * Given a selector, returns an hpq matcher generating a WPBlockChildren value\n * matching the selector result.\n *\n * @param {string} selector DOM selector.\n *\n * @return {Function} hpq matcher.\n */\nexport function matcher( selector ) {\n\treturn ( domNode ) => {\n\t\tlet match = domNode;\n\n\t\tif ( selector ) {\n\t\t\tmatch = domNode.querySelector( selector );\n\t\t}\n\n\t\tif ( match ) {\n\t\t\treturn fromDOM( match.childNodes );\n\t\t}\n\n\t\treturn [];\n\t};\n}\n\n/**\n * Object of utility functions used in managing block attribute values of\n * source `children`.\n *\n * @see https://github.com/WordPress/gutenberg/pull/10439\n *\n * @deprecated since 4.0. The `children` source should not be used, and can be\n *             replaced by the `html` source.\n *\n * @private\n */\nexport default {\n\tconcat,\n\tgetChildrenArray,\n\tfromDOM,\n\ttoHTML,\n\tmatcher,\n};\n"]}