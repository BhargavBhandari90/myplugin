{"version":3,"sources":["@wordpress/hooks/src/createDoingHook.js"],"names":["createDoingHook","hooks","storeKey","doingHook","hookName","hooksStore","__current","name"],"mappings":";;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,eAAT,CAA0BC,KAA1B,EAAiCC,QAAjC,EAA4C;AAC3C,SAAO,SAASC,SAAT,CAAoBC,QAApB,EAA+B;AACrC,UAAMC,UAAU,GAAGJ,KAAK,CAAEC,QAAF,CAAxB,CADqC,CAGrC;;AACA,QAAK,gBAAgB,OAAOE,QAA5B,EAAuC;AACtC,aAAO,gBAAgB,OAAOC,UAAU,CAACC,SAAX,CAAsB,CAAtB,CAA9B;AACA,KANoC,CAQrC;;;AACA,WAAOD,UAAU,CAACC,SAAX,CAAsB,CAAtB,IACJF,QAAQ,KAAKC,UAAU,CAACC,SAAX,CAAsB,CAAtB,EAA0BC,IADnC,GAEJ,KAFH;AAGA,GAZD;AAaA;;eAEcP,e","sourcesContent":["/**\n * @callback DoingHook\n * Returns whether a hook is currently being executed.\n *\n * @param {string} [hookName] The name of the hook to check for.  If\n *                            omitted, will check for any hook being executed.\n *\n * @return {boolean} Whether the hook is being executed.\n */\n\n/**\n * Returns a function which, when invoked, will return whether a hook is\n * currently being executed.\n *\n * @param {import('.').Hooks}    hooks    Hooks instance.\n * @param {import('.').StoreKey} storeKey\n *\n * @return {DoingHook} Function that returns whether a hook is currently\n *                     being executed.\n */\nfunction createDoingHook( hooks, storeKey ) {\n\treturn function doingHook( hookName ) {\n\t\tconst hooksStore = hooks[ storeKey ];\n\n\t\t// If the hookName was not passed, check for any current hook.\n\t\tif ( 'undefined' === typeof hookName ) {\n\t\t\treturn 'undefined' !== typeof hooksStore.__current[ 0 ];\n\t\t}\n\n\t\t// Return the __current hook.\n\t\treturn hooksStore.__current[ 0 ]\n\t\t\t? hookName === hooksStore.__current[ 0 ].name\n\t\t\t: false;\n\t};\n}\n\nexport default createDoingHook;\n"]}