{"version":3,"sources":["@wordpress/hooks/src/validateNamespace.js"],"names":["validateNamespace","namespace","console","error","test"],"mappings":";;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,iBAAT,CAA4BC,SAA5B,EAAwC;AACvC,MAAK,aAAa,OAAOA,SAApB,IAAiC,OAAOA,SAA7C,EAAyD;AACxD;AACAC,IAAAA,OAAO,CAACC,KAAR,CAAe,2CAAf;AACA,WAAO,KAAP;AACA;;AAED,MAAK,CAAE,+BAA+BC,IAA/B,CAAqCH,SAArC,CAAP,EAA0D;AACzD;AACAC,IAAAA,OAAO,CAACC,KAAR,CACC,4FADD;AAGA,WAAO,KAAP;AACA;;AAED,SAAO,IAAP;AACA;;eAEcH,iB","sourcesContent":["/**\n * Validate a namespace string.\n *\n * @param {string} namespace The namespace to validate - should take the form\n *                           `vendor/plugin/function`.\n *\n * @return {boolean} Whether the namespace is valid.\n */\nfunction validateNamespace( namespace ) {\n\tif ( 'string' !== typeof namespace || '' === namespace ) {\n\t\t// eslint-disable-next-line no-console\n\t\tconsole.error( 'The namespace must be a non-empty string.' );\n\t\treturn false;\n\t}\n\n\tif ( ! /^[a-zA-Z][a-zA-Z0-9_.\\-\\/]*$/.test( namespace ) ) {\n\t\t// eslint-disable-next-line no-console\n\t\tconsole.error(\n\t\t\t'The namespace can only contain numbers, letters, dashes, periods, underscores and slashes.'\n\t\t);\n\t\treturn false;\n\t}\n\n\treturn true;\n}\n\nexport default validateNamespace;\n"]}