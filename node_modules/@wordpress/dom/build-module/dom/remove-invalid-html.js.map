{"version":3,"sources":["@wordpress/dom/src/dom/remove-invalid-html.js"],"names":["cleanNodeList","removeInvalidHTML","HTML","schema","inline","doc","document","implementation","createHTMLDocument","body","innerHTML","childNodes"],"mappings":"AAAA;AACA;AACA;AACA,OAAOA,aAAP,MAA0B,mBAA1B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,SAASC,iBAAT,CAA4BC,IAA5B,EAAkCC,MAAlC,EAA0CC,MAA1C,EAAmD;AACjE,QAAMC,GAAG,GAAGC,QAAQ,CAACC,cAAT,CAAwBC,kBAAxB,CAA4C,EAA5C,CAAZ;AAEAH,EAAAA,GAAG,CAACI,IAAJ,CAASC,SAAT,GAAqBR,IAArB;AAEAF,EAAAA,aAAa,CAAEK,GAAG,CAACI,IAAJ,CAASE,UAAX,EAAuBN,GAAvB,EAA4BF,MAA5B,EAAoCC,MAApC,CAAb;AAEA,SAAOC,GAAG,CAACI,IAAJ,CAASC,SAAhB;AACA","sourcesContent":["/**\n * Internal dependencies\n */\nimport cleanNodeList from './clean-node-list';\n\n/**\n * Given a schema, unwraps or removes nodes, attributes and classes on HTML.\n *\n * @param {string}                             HTML   The HTML to clean up.\n * @param {import('./clean-node-list').Schema} schema Schema for the HTML.\n * @param {boolean}                            inline Whether to clean for inline mode.\n *\n * @return {string} The cleaned up HTML.\n */\nexport default function removeInvalidHTML( HTML, schema, inline ) {\n\tconst doc = document.implementation.createHTMLDocument( '' );\n\n\tdoc.body.innerHTML = HTML;\n\n\tcleanNodeList( doc.body.childNodes, doc, schema, inline );\n\n\treturn doc.body.innerHTML;\n}\n"]}