{"version":3,"sources":["@wordpress/is-shallow-equal/src/index.js"],"names":["isShallowEqualObjects","isShallowEqualArrays","default","isShallowEqual","a","b","constructor","Object","Array","isArray"],"mappings":"AAAA;AACA;AACA;AACA,OAAOA,qBAAP,MAAkC,WAAlC;AACA,OAAOC,oBAAP,MAAiC,UAAjC;AAEA,SAASC,OAAO,IAAIF,qBAApB,QAAiD,WAAjD;AACA,SAASE,OAAO,IAAID,oBAApB,QAAgD,UAAhD;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,SAASE,cAAT,CAAyBC,CAAzB,EAA4BC,CAA5B,EAAgC;AAC9C,MAAKD,CAAC,IAAIC,CAAV,EAAc;AACb,QAAKD,CAAC,CAACE,WAAF,KAAkBC,MAAlB,IAA4BF,CAAC,CAACC,WAAF,KAAkBC,MAAnD,EAA4D;AAC3D,aAAOP,qBAAqB,CAAEI,CAAF,EAAKC,CAAL,CAA5B;AACA,KAFD,MAEO,IAAKG,KAAK,CAACC,OAAN,CAAeL,CAAf,KAAsBI,KAAK,CAACC,OAAN,CAAeJ,CAAf,CAA3B,EAAgD;AACtD,aAAOJ,oBAAoB,CAAEG,CAAF,EAAKC,CAAL,CAA3B;AACA;AACD;;AAED,SAAOD,CAAC,KAAKC,CAAb;AACA","sourcesContent":["/**\n * Internal dependencies\n */\nimport isShallowEqualObjects from './objects';\nimport isShallowEqualArrays from './arrays';\n\nexport { default as isShallowEqualObjects } from './objects';\nexport { default as isShallowEqualArrays } from './arrays';\n\n/**\n * @typedef {Record<string, any>} ComparableObject\n */\n\n/**\n * Returns true if the two arrays or objects are shallow equal, or false\n * otherwise.\n *\n * @param {any[]|ComparableObject} a First object or array to compare.\n * @param {any[]|ComparableObject} b Second object or array to compare.\n *\n * @return {boolean} Whether the two values are shallow equal.\n */\nexport default function isShallowEqual( a, b ) {\n\tif ( a && b ) {\n\t\tif ( a.constructor === Object && b.constructor === Object ) {\n\t\t\treturn isShallowEqualObjects( a, b );\n\t\t} else if ( Array.isArray( a ) && Array.isArray( b ) ) {\n\t\t\treturn isShallowEqualArrays( a, b );\n\t\t}\n\t}\n\n\treturn a === b;\n}\n"]}