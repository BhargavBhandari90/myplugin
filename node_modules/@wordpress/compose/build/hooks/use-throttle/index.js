"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = useThrottle;

var _lodash = require("lodash");

var _useMemoOne = require("use-memo-one");

var _element = require("@wordpress/element");

/**
 * External dependencies
 */

/**
 * WordPress dependencies
 */

/**
 * Throttles a function with Lodash's `throttle`. A new throttled function will
 * be returned and any scheduled calls cancelled if any of the arguments change,
 * including the function to throttle, so please wrap functions created on
 * render in components in `useCallback`.
 *
 * @see https://docs-lodash.com/v4/throttle/
 *
 * @template {(...args: any[]) => void} TFunc
 *
 * @param {TFunc}                             fn        The function to throttle.
 * @param {number}                            [wait]    The number of milliseconds to throttle invocations to.
 * @param {import('lodash').ThrottleSettings} [options] The options object. See linked documentation for details.
 * @return {import('lodash').DebouncedFunc<TFunc>} Throttled function.
 */
function useThrottle(fn, wait, options) {
  const throttled = (0, _useMemoOne.useMemoOne)(() => (0, _lodash.throttle)(fn, wait, options), [fn, wait, options]);
  (0, _element.useEffect)(() => () => throttled.cancel(), [throttled]);
  return throttled;
}
//# sourceMappingURL=index.js.map